For this assignment, I created three different tests that are designed to run a series of tests on a single card played in the game of Dominion. I opted to choose the Adventurer (required), Council Room (tested in Assignment 2), and Smithy cards for this assignment. In order to ensure randomness in every test, each test must take in a seed value which is used for the srand() function. This determines the seed used when randomly determining the number of players, the game seed, deck count, discard pile count, hand count, and so on. Each test program runs a series of card tests 100,000 times each with different randomized values to help ensure proper code coverage and to cover as many scenarios as possible.

The coverage using these new randomized test programs has improved about 10-20% versus the unit tests from Assignment 2. I believe this is due to the fact that the randomized game seed (not the input seed), deck, discard, player, and hand count values made the tests able to reach more branches of code/cover more scenarios. I was able to reach 100% code coverage (for the function involving the cards) for all three cards tested (adventurer, smithy, council room). With a total of 300,000 tests combined between the three test programs, there were only four failed assertions and they were all related to incorrect hand counts. The adventurer card seems to be correct as it had no failed assertions with 100,000 randomized tests being ran on it.

Overall, the randomized tests definitely have a better ability to find errors because of the randomized values and the fact that they are being run multiple times. The randomized tests found 4 failed assertions where as all the unit tests combined only found one failed assertion. In contrast, the unit tests are really only testing the code with a single scenario versus 100,000 times with different values each time.
