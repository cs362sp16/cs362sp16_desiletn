13: /* MUTANT (del_stmt) */ /*     int cardDrawn = 0; */ 
13: /* MUTANT (rep_const) */    int cardDrawn = 1;
13: /* MUTANT (rep_const) */    int cardDrawn = -1;
14: /* MUTANT (del_stmt) */ /*     int drawnTreasure = 0; */ 
14: /* MUTANT (rep_const) */    int drawnTreasure = 1;
14: /* MUTANT (rep_const) */    int drawnTreasure = -1;
15: /* MUTANT (del_stmt) */ /*     int tempHand[MAX_HAND]; */ 
16: /* MUTANT (del_stmt) */ /*     int z = 0; */  // for temp hand...
16: /* MUTANT (rep_const) */    int z = 1; // for temp hand...
16: /* MUTANT (rep_const) */    int z = -1; // for temp hand...
18: /* MUTANT (rep_op) */    while(drawnTreasure <= 2){
18: /* MUTANT (rep_op) */    while(drawnTreasure > 2){
18: /* MUTANT (rep_op) */    while(drawnTreasure >= 2){
18: /* MUTANT (rep_op) */    while(drawnTreasure == 2){
18: /* MUTANT (rep_op) */    while(drawnTreasure != 2){
18: /* MUTANT (rep_const) */    while(drawnTreasure < 0){
18: /* MUTANT (rep_const) */    while(drawnTreasure < 1){
18: /* MUTANT (rep_const) */    while(drawnTreasure < -1){
18: /* MUTANT (rep_const) */    while(drawnTreasure < ((2)+1)){
18: /* MUTANT (rep_const) */    while(drawnTreasure < ((2)-1)){
18: /* MUTANT (negate) */    while(!(drawnTreasure < 2)){
20: /* MUTANT (rep_op) */        if(state->deckCount[currentPlayer] <= 1){
20: /* MUTANT (rep_op) */        if(state->deckCount[currentPlayer] > 1){
20: /* MUTANT (rep_op) */        if(state->deckCount[currentPlayer] >= 1){
20: /* MUTANT (rep_op) */        if(state->deckCount[currentPlayer] == 1){
20: /* MUTANT (rep_op) */        if(state->deckCount[currentPlayer] != 1){
20: /* MUTANT (rep_const) */        if(state->deckCount[currentPlayer] < 0){
20: /* MUTANT (rep_const) */        if(state->deckCount[currentPlayer] < -1){
20: /* MUTANT (rep_const) */        if(state->deckCount[currentPlayer] < ((1)+1)){
20: /* MUTANT (negate) */        if(!(state->deckCount[currentPlayer] < 1)){
22: /* MUTANT (del_stmt) */ /*             shuffle(currentPlayer, state); */ 
30: /* MUTANT (del_stmt) */ /*         cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; */ 
30: /* MUTANT (rep_const) */        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 0];
30: /* MUTANT (rep_const) */        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - -1];
30: /* MUTANT (rep_const) */        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - ((1)+1)];
32: /* MUTANT (rep_op) */        if(cardDrawn != copper || cardDrawn == silver || cardDrawn == gold){
32: /* MUTANT (rep_op) */        if(cardDrawn == copper && cardDrawn == silver || cardDrawn == gold){
32: /* MUTANT (rep_op) */        if(cardDrawn == copper || cardDrawn != silver || cardDrawn == gold){
32: /* MUTANT (rep_op) */        if(cardDrawn == copper || cardDrawn == silver && cardDrawn == gold){
32: /* MUTANT (rep_op) */        if(cardDrawn == copper || cardDrawn == silver || cardDrawn != gold){
32: /* MUTANT (negate) */        if(!(cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)){
33: /* MUTANT (del_stmt) */ /*             drawnTreasure++; */ 
33: /* MUTANT (rep_op) */            drawnTreasure--;
36: /* MUTANT (del_stmt) */ /*             tempHand[z] = cardDrawn; */ 
37: /* MUTANT (del_stmt) */ /*             state->handCount[currentPlayer]--; */  // rm most recent (top) card
37: /* MUTANT (rep_op) */            state->handCount[currentPlayer]++; // rm most recent (top) card
38: /* MUTANT (del_stmt) */ /*             z++; */ 
38: /* MUTANT (rep_op) */            z--;
43: /* MUTANT (rep_op) */    while(z - 1 <= 0){
43: /* MUTANT (rep_op) */    while(z - 1 < 0){
43: /* MUTANT (rep_op) */    while(z - 1 > 0){
43: /* MUTANT (rep_op) */    while(z - 1 == 0){
43: /* MUTANT (rep_op) */    while(z - 1 != 0){
43: /* MUTANT (rep_const) */    while(z - 0 >= 0){
43: /* MUTANT (rep_const) */    while(z - -1 >= 0){
43: /* MUTANT (rep_const) */    while(z - ((1)+1) >= 0){
43: /* MUTANT (rep_const) */    while(z - 1 >= 1){
43: /* MUTANT (rep_const) */    while(z - 1 >= -1){
43: /* MUTANT (negate) */    while(!(z - 1 >= 0)){
45: /* MUTANT (del_stmt) */ /*         state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[z - 1]; */ 
45: /* MUTANT (rep_op) */        state->discard[currentPlayer][state->discardCount[currentPlayer]--] = tempHand[z - 1];
45: /* MUTANT (rep_const) */        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[z - 0];
45: /* MUTANT (rep_const) */        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[z - -1];
45: /* MUTANT (rep_const) */        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[z - ((1)+1)];
46: /* MUTANT (del_stmt) */ /*         z--; */ 
46: /* MUTANT (rep_op) */        z++;
52: /* MUTANT (rep_op) */    for(int i = 0; i <= 4; i++){
52: /* MUTANT (rep_op) */    for(int i = 0; i > 4; i++){
52: /* MUTANT (rep_op) */    for(int i = 0; i >= 4; i++){
52: /* MUTANT (rep_op) */    for(int i = 0; i == 4; i++){
52: /* MUTANT (rep_op) */    for(int i = 0; i != 4; i++){
52: /* MUTANT (rep_op) */    for(int i = 0; i < 4; i--){
52: /* MUTANT (rep_const) */    for(int i = 1; i < 4; i++){
52: /* MUTANT (rep_const) */    for(int i = -1; i < 4; i++){
52: /* MUTANT (rep_const) */    for(int i = 0; i < 0; i++){
52: /* MUTANT (rep_const) */    for(int i = 0; i < 1; i++){
52: /* MUTANT (rep_const) */    for(int i = 0; i < -1; i++){
52: /* MUTANT (rep_const) */    for(int i = 0; i < ((4)+1); i++){
52: /* MUTANT (rep_const) */    for(int i = 0; i < ((4)-1); i++){
53: /* MUTANT (del_stmt) */ /*         drawCard(currentPlayer, state); */ 
57: /* MUTANT (rep_op) */    state->numBuys--;
60: /* MUTANT (rep_op) */    for(int i = 0; i <= state->numPlayers; i++){
60: /* MUTANT (rep_op) */    for(int i = 0; i > state->numPlayers; i++){
60: /* MUTANT (rep_op) */    for(int i = 0; i >= state->numPlayers; i++){
60: /* MUTANT (rep_op) */    for(int i = 0; i == state->numPlayers; i++){
60: /* MUTANT (rep_op) */    for(int i = 0; i != state->numPlayers; i++){
60: /* MUTANT (rep_op) */    for(int i = 0; i < state->numPlayers; i--){
60: /* MUTANT (rep_const) */    for(int i = 1; i < state->numPlayers; i++){
60: /* MUTANT (rep_const) */    for(int i = -1; i < state->numPlayers; i++){
61: /* MUTANT (rep_op) */        if(i == currentPlayer){
61: /* MUTANT (negate) */        if(!(i != currentPlayer)){
62: /* MUTANT (del_stmt) */ /*             drawCard(i, state); */ 
66: /* MUTANT (rep_const) */    discardCard(handPos, currentPlayer, state, 1);
66: /* MUTANT (rep_const) */    discardCard(handPos, currentPlayer, state, -1);
70: /* MUTANT (del_stmt) */ /*     int tempHand[MAX_HAND]; */ 
74: /* MUTANT (rep_op) */    for(int i = 0; i < state->handCount[currentPlayer]; i++){
74: /* MUTANT (rep_op) */    for(int i = 0; i > state->handCount[currentPlayer]; i++){
74: /* MUTANT (rep_op) */    for(int i = 0; i >= state->handCount[currentPlayer]; i++){
74: /* MUTANT (rep_op) */    for(int i = 0; i == state->handCount[currentPlayer]; i++){
74: /* MUTANT (rep_op) */    for(int i = 0; i != state->handCount[currentPlayer]; i++){
74: /* MUTANT (rep_op) */    for(int i = 0; i <= state->handCount[currentPlayer]; i--){
74: /* MUTANT (rep_const) */    for(int i = 1; i <= state->handCount[currentPlayer]; i++){
74: /* MUTANT (rep_const) */    for(int i = -1; i <= state->handCount[currentPlayer]; i++){
75: /* MUTANT (del_stmt) */ /*         tempHand[i] = state->hand[currentPlayer][i]; */  // Backup card
76: /* MUTANT (del_stmt) */ /*         state->hand[currentPlayer][i] = -1; */  // Set to nothing
76: /* MUTANT (rep_const) */        state->hand[currentPlayer][i] = 0; // Set to nothing
76: /* MUTANT (rep_const) */        state->hand[currentPlayer][i] = 1; // Set to nothing
76: /* MUTANT (rep_const) */        state->hand[currentPlayer][i] = ((-1)+1); // Set to nothing
76: /* MUTANT (rep_const) */        state->hand[currentPlayer][i] = ((-1)-1); // Set to nothing
80: /* MUTANT (rep_const) */    updateCoins(currentPlayer, state, 0);
80: /* MUTANT (rep_const) */    updateCoins(currentPlayer, state, 1);
80: /* MUTANT (rep_const) */    updateCoins(currentPlayer, state, -1);
80: /* MUTANT (rep_const) */    updateCoins(currentPlayer, state, ((5)+1));
80: /* MUTANT (rep_const) */    updateCoins(currentPlayer, state, ((5)-1));
82: /* MUTANT (del_stmt) */ /*     int x = 1; */ 
82: /* MUTANT (rep_const) */    int x = 0;
82: /* MUTANT (rep_const) */    int x = -1;
82: /* MUTANT (rep_const) */    int x = ((1)+1);
83: /* MUTANT (rep_op) */    while(x != 1){ // Buy one card
83: /* MUTANT (rep_const) */    while(x == 0){ // Buy one card
83: /* MUTANT (rep_const) */    while(x == -1){ // Buy one card
83: /* MUTANT (rep_const) */    while(x == ((1)+1)){ // Buy one card
83: /* MUTANT (negate) */    while(!(x == 1)){ // Buy one card
84: /* MUTANT (rep_op) */        if(supplyCount(choice1, state) < 0){
84: /* MUTANT (rep_op) */        if(supplyCount(choice1, state) > 0){
84: /* MUTANT (rep_op) */        if(supplyCount(choice1, state) >= 0){
84: /* MUTANT (rep_op) */        if(supplyCount(choice1, state) == 0){
84: /* MUTANT (rep_op) */        if(supplyCount(choice1, state) != 0){
84: /* MUTANT (rep_const) */        if(supplyCount(choice1, state) <= 1){
84: /* MUTANT (rep_const) */        if(supplyCount(choice1, state) <= -1){
84: /* MUTANT (negate) */        if(!(supplyCount(choice1, state) <= 0)){
85: /* MUTANT (negate) */            if(!(DEBUG)){
86: /* MUTANT (del_stmt) */ /*                 printf("None of that card left, sorry!\n"); */ 
87: /* MUTANT (del_stmt) */ /*                 printf("Cards Left: %d\n", supplyCount(choice1, state)); */ 
89: /* MUTANT (rep_op) */        }else if(state->coins <= getCost(choice1)){
89: /* MUTANT (rep_op) */        }else if(state->coins > getCost(choice1)){
89: /* MUTANT (rep_op) */        }else if(state->coins >= getCost(choice1)){
89: /* MUTANT (rep_op) */        }else if(state->coins == getCost(choice1)){
89: /* MUTANT (rep_op) */        }else if(state->coins != getCost(choice1)){
89: /* MUTANT (negate) */        }else if(!(state->coins < getCost(choice1))){
90: /* MUTANT (del_stmt) */ /*             printf("That card is too expensive!\n"); */ 
92: /* MUTANT (negate) */            if(!(DEBUG)){
93: /* MUTANT (del_stmt) */ /*                 printf("Coins: %d < %d\n", state->coins, getCost(choice1)); */ 
96: /* MUTANT (negate) */            if(!(DEBUG)){
97: /* MUTANT (del_stmt) */ /*                 printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]); */ 
97: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] - state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
97: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] * state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
97: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] % state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
97: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] - state->discardCount[currentPlayer]);
97: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] * state->discardCount[currentPlayer]);
97: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] % state->discardCount[currentPlayer]);
100: /* MUTANT (rep_const) */            gainCard(choice1, state, 1, currentPlayer); //Gain the card
100: /* MUTANT (rep_const) */            gainCard(choice1, state, -1, currentPlayer); //Gain the card
101: /* MUTANT (del_stmt) */ /*             x = 0; */  //No more buying cards
101: /* MUTANT (rep_const) */            x = 1; //No more buying cards
101: /* MUTANT (rep_const) */            x = -1; //No more buying cards
103: /* MUTANT (negate) */            if(!(DEBUG)){
104: /* MUTANT (del_stmt) */ /*                 printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]); */ 
104: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] - state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
104: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] * state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
104: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] % state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
104: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] - state->discardCount[currentPlayer]);
104: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] * state->discardCount[currentPlayer]);
104: /* MUTANT (rep_op) */                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] % state->discardCount[currentPlayer]);
110: /* MUTANT (rep_op) */    for(int i = 0; i < state->handCount[currentPlayer]; i++){
110: /* MUTANT (rep_op) */    for(int i = 0; i > state->handCount[currentPlayer]; i++){
110: /* MUTANT (rep_op) */    for(int i = 0; i >= state->handCount[currentPlayer]; i++){
110: /* MUTANT (rep_op) */    for(int i = 0; i == state->handCount[currentPlayer]; i++){
110: /* MUTANT (rep_op) */    for(int i = 0; i != state->handCount[currentPlayer]; i++){
110: /* MUTANT (rep_op) */    for(int i = 0; i <= state->handCount[currentPlayer]; i--){
110: /* MUTANT (rep_const) */    for(int i = 1; i <= state->handCount[currentPlayer]; i++){
110: /* MUTANT (rep_const) */    for(int i = -1; i <= state->handCount[currentPlayer]; i++){
111: /* MUTANT (del_stmt) */ /*         state->hand[currentPlayer][i] = tempHand[i]; */ 
112: /* MUTANT (del_stmt) */ /*         tempHand[i] = -1; */ 
112: /* MUTANT (rep_const) */        tempHand[i] = 0;
112: /* MUTANT (rep_const) */        tempHand[i] = 1;
112: /* MUTANT (rep_const) */        tempHand[i] = ((-1)+1);
112: /* MUTANT (rep_const) */        tempHand[i] = ((-1)-1);
117: /* MUTANT (del_stmt) */ /*     int j; */ 
120: /* MUTANT (del_stmt) */ /*     j = state->hand[currentPlayer][choice1]; */ 
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] <= copper || state->hand[currentPlayer][choice1] > gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] > gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] >= copper || state->hand[currentPlayer][choice1] > gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] == copper || state->hand[currentPlayer][choice1] > gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] != copper || state->hand[currentPlayer][choice1] > gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] <= gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] < gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] >= gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] == gold){
122: /* MUTANT (rep_op) */    if(state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] != gold){
122: /* MUTANT (negate) */    if(!(state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)){
123: /* MUTANT (del_stmt) */ /*         return 0; */ 
123: /* MUTANT (rep_const) */        return 1;
123: /* MUTANT (rep_const) */        return -1;
126: /* MUTANT (rep_op) */    if (choice2 <= treasure_map || choice2 < curse){
126: /* MUTANT (rep_op) */    if (choice2 < treasure_map || choice2 < curse){
126: /* MUTANT (rep_op) */    if (choice2 >= treasure_map || choice2 < curse){
126: /* MUTANT (rep_op) */    if (choice2 == treasure_map || choice2 < curse){
126: /* MUTANT (rep_op) */    if (choice2 != treasure_map || choice2 < curse){
126: /* MUTANT (rep_op) */    if (choice2 > treasure_map && choice2 < curse){
126: /* MUTANT (rep_op) */    if (choice2 > treasure_map || choice2 <= curse){
126: /* MUTANT (rep_op) */    if (choice2 > treasure_map || choice2 > curse){
126: /* MUTANT (rep_op) */    if (choice2 > treasure_map || choice2 >= curse){
126: /* MUTANT (rep_op) */    if (choice2 > treasure_map || choice2 == curse){
126: /* MUTANT (rep_op) */    if (choice2 > treasure_map || choice2 != curse){
126: /* MUTANT (negate) */    if(! (choice2 > treasure_map || choice2 < curse)){
127: /* MUTANT (del_stmt) */ /*         return 0; */ 
127: /* MUTANT (rep_const) */        return 1;
127: /* MUTANT (rep_const) */        return -1;
130: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) - 3) > getCost(choice2)){
130: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) * 3) > getCost(choice2)){
130: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) % 3) > getCost(choice2)){
130: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 3) <= getCost(choice2)){
130: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2)){
130: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 3) >= getCost(choice2)){
130: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 3) == getCost(choice2)){
130: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 3) != getCost(choice2)){
130: /* MUTANT (rep_const) */    if((getCost(state->hand[currentPlayer][choice1]) + 0) > getCost(choice2)){
130: /* MUTANT (rep_const) */    if((getCost(state->hand[currentPlayer][choice1]) + 1) > getCost(choice2)){
130: /* MUTANT (rep_const) */    if((getCost(state->hand[currentPlayer][choice1]) + -1) > getCost(choice2)){
130: /* MUTANT (rep_const) */    if((getCost(state->hand[currentPlayer][choice1]) + ((3)+1)) > getCost(choice2)){
130: /* MUTANT (rep_const) */    if((getCost(state->hand[currentPlayer][choice1]) + ((3)-1)) > getCost(choice2)){
130: /* MUTANT (negate) */    if(!((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))){
131: /* MUTANT (del_stmt) */ /*         return 0; */ 
131: /* MUTANT (rep_const) */        return 1;
131: /* MUTANT (rep_const) */        return -1;
134: /* MUTANT (rep_const) */    gainCard(choice2, state, 0, currentPlayer);
134: /* MUTANT (rep_const) */    gainCard(choice2, state, 1, currentPlayer);
134: /* MUTANT (rep_const) */    gainCard(choice2, state, -1, currentPlayer);
134: /* MUTANT (rep_const) */    gainCard(choice2, state, ((2)+1), currentPlayer);
134: /* MUTANT (rep_const) */    gainCard(choice2, state, ((2)-1), currentPlayer);
137: /* MUTANT (del_stmt) */ /*     discardCard(handPos, currentPlayer, state, 0); */ 
137: /* MUTANT (rep_const) */    discardCard(handPos, currentPlayer, state, 1);
137: /* MUTANT (rep_const) */    discardCard(handPos, currentPlayer, state, -1);
140: /* MUTANT (rep_op) */    for(int i = 0; i <= state->handCount[currentPlayer]; i++){
140: /* MUTANT (rep_op) */    for(int i = 0; i > state->handCount[currentPlayer]; i++){
140: /* MUTANT (rep_op) */    for(int i = 0; i >= state->handCount[currentPlayer]; i++){
140: /* MUTANT (rep_op) */    for(int i = 0; i == state->handCount[currentPlayer]; i++){
140: /* MUTANT (rep_op) */    for(int i = 0; i != state->handCount[currentPlayer]; i++){
140: /* MUTANT (rep_op) */    for(int i = 0; i < state->handCount[currentPlayer]; i--){
140: /* MUTANT (rep_const) */    for(int i = 1; i < state->handCount[currentPlayer]; i++){
140: /* MUTANT (rep_const) */    for(int i = -1; i < state->handCount[currentPlayer]; i++){
141: /* MUTANT (rep_op) */        if(state->hand[currentPlayer][i] != j){
141: /* MUTANT (negate) */        if(!(state->hand[currentPlayer][i] == j)){
142: /* MUTANT (del_stmt) */ /*             discardCard(i, currentPlayer, state, 0); */ 
142: /* MUTANT (rep_const) */            discardCard(i, currentPlayer, state, 1);
142: /* MUTANT (rep_const) */            discardCard(i, currentPlayer, state, -1);
143: /* MUTANT (del_stmt) */ /*             break; */ 
147: /* MUTANT (rep_const) */    return 0;
147: /* MUTANT (rep_const) */    return 1;
147: /* MUTANT (rep_const) */    return ((-1)+1);
147: /* MUTANT (rep_const) */    return ((-1)-1);
151: /* MUTANT (del_stmt) */ /*     int j; */ 
154: /* MUTANT (del_stmt) */ /*     j = state->hand[currentPlayer][choice1]; */ 
156: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) - 1) > getCost(choice2)){
156: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) * 1) > getCost(choice2)){
156: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) % 1) > getCost(choice2)){
156: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 1) <= getCost(choice2)){
156: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 1) < getCost(choice2)){
156: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 1) >= getCost(choice2)){
156: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 1) == getCost(choice2)){
156: /* MUTANT (rep_op) */    if((getCost(state->hand[currentPlayer][choice1]) + 1) != getCost(choice2)){
156: /* MUTANT (rep_const) */    if((getCost(state->hand[currentPlayer][choice1]) + 0) > getCost(choice2)){
156: /* MUTANT (rep_const) */    if((getCost(state->hand[currentPlayer][choice1]) + -1) > getCost(choice2)){
156: /* MUTANT (rep_const) */    if((getCost(state->hand[currentPlayer][choice1]) + ((1)+1)) > getCost(choice2)){
156: /* MUTANT (negate) */    if(!((getCost(state->hand[currentPlayer][choice1]) + 1) > getCost(choice2))){
157: /* MUTANT (del_stmt) */ /*         return -1; */ 
157: /* MUTANT (rep_const) */        return 0;
157: /* MUTANT (rep_const) */        return 1;
157: /* MUTANT (rep_const) */        return ((-1)+1);
157: /* MUTANT (rep_const) */        return ((-1)-1);
160: /* MUTANT (rep_const) */    gainCard(choice2, state, 1, currentPlayer);
160: /* MUTANT (rep_const) */    gainCard(choice2, state, -1, currentPlayer);
163: /* MUTANT (del_stmt) */ /*     discardCard(handPos, currentPlayer, state, 0); */ 
163: /* MUTANT (rep_const) */    discardCard(handPos, currentPlayer, state, 1);
163: /* MUTANT (rep_const) */    discardCard(handPos, currentPlayer, state, -1);
166: /* MUTANT (rep_op) */    for (int i = 0; i <= state->handCount[currentPlayer] - 1; i++){
166: /* MUTANT (rep_op) */    for (int i = 0; i > state->handCount[currentPlayer] - 1; i++){
166: /* MUTANT (rep_op) */    for (int i = 0; i >= state->handCount[currentPlayer] - 1; i++){
166: /* MUTANT (rep_op) */    for (int i = 0; i == state->handCount[currentPlayer] - 1; i++){
166: /* MUTANT (rep_op) */    for (int i = 0; i != state->handCount[currentPlayer] - 1; i++){
166: /* MUTANT (rep_op) */    for (int i = 0; i < state->handCount[currentPlayer] - 1; i--){
166: /* MUTANT (rep_const) */    for (int i = 1; i < state->handCount[currentPlayer] - 1; i++){
166: /* MUTANT (rep_const) */    for (int i = -1; i < state->handCount[currentPlayer] - 1; i++){
166: /* MUTANT (rep_const) */    for (int i = 0; i < state->handCount[currentPlayer] - 0; i++){
166: /* MUTANT (rep_const) */    for (int i = 0; i < state->handCount[currentPlayer] - -1; i++){
166: /* MUTANT (rep_const) */    for (int i = 0; i < state->handCount[currentPlayer] - ((1)+1); i++){
167: /* MUTANT (rep_op) */        if (state->hand[currentPlayer][i] != j){
167: /* MUTANT (negate) */        if(! (state->hand[currentPlayer][i] == j)){
168: /* MUTANT (del_stmt) */ /*             discardCard(i, currentPlayer, state, 0); */ 
168: /* MUTANT (rep_const) */            discardCard(i, currentPlayer, state, 1);
168: /* MUTANT (rep_const) */            discardCard(i, currentPlayer, state, -1);
169: /* MUTANT (del_stmt) */ /*             break; */ 
173: /* MUTANT (rep_const) */    return 1;
173: /* MUTANT (rep_const) */    return -1;
181: /* MUTANT (rep_op) */    if (*(int*)a <= *(int*)b)
181: /* MUTANT (rep_op) */    if (*(int*)a < *(int*)b)
181: /* MUTANT (rep_op) */    if (*(int*)a >= *(int*)b)
181: /* MUTANT (rep_op) */    if (*(int*)a == *(int*)b)
181: /* MUTANT (rep_op) */    if (*(int*)a != *(int*)b)
181: /* MUTANT (negate) */    if(! (*(int*)a > *(int*)b))
182: /* MUTANT (rep_const) */        return 0;
182: /* MUTANT (rep_const) */        return -1;
182: /* MUTANT (rep_const) */        return ((1)+1);
183: /* MUTANT (rep_op) */    if (*(int*)a <= *(int*)b)
183: /* MUTANT (rep_op) */    if (*(int*)a > *(int*)b)
183: /* MUTANT (rep_op) */    if (*(int*)a >= *(int*)b)
183: /* MUTANT (rep_op) */    if (*(int*)a == *(int*)b)
183: /* MUTANT (rep_op) */    if (*(int*)a != *(int*)b)
183: /* MUTANT (negate) */    if(! (*(int*)a < *(int*)b))
184: /* MUTANT (rep_const) */        return 0;
184: /* MUTANT (rep_const) */        return 1;
184: /* MUTANT (rep_const) */        return ((-1)+1);
184: /* MUTANT (rep_const) */        return ((-1)-1);
185: /* MUTANT (del_stmt) */ /*     return 0; */ 
185: /* MUTANT (rep_const) */    return 1;
185: /* MUTANT (rep_const) */    return -1;
189: /* MUTANT (del_stmt) */ /*     struct gameState* g = malloc(sizeof(struct gameState)); */ 
190: /* MUTANT (del_stmt) */ /*     return g; */ 
195: /* MUTANT (del_stmt) */ /*     int* k = malloc(10 * sizeof(int)); */ 
195: /* MUTANT (rep_const) */    int* k = malloc(0 * sizeof(int));
195: /* MUTANT (rep_const) */    int* k = malloc(1 * sizeof(int));
195: /* MUTANT (rep_const) */    int* k = malloc(-1 * sizeof(int));
195: /* MUTANT (rep_const) */    int* k = malloc(((10)+1) * sizeof(int));
195: /* MUTANT (rep_const) */    int* k = malloc(((10)-1) * sizeof(int));
196: /* MUTANT (del_stmt) */ /*     k[0] = k1; */ 
196: /* MUTANT (rep_const) */    k[1] = k1;
196: /* MUTANT (rep_const) */    k[-1] = k1;
197: /* MUTANT (del_stmt) */ /*     k[1] = k2; */ 
197: /* MUTANT (rep_const) */    k[0] = k2;
197: /* MUTANT (rep_const) */    k[-1] = k2;
197: /* MUTANT (rep_const) */    k[((1)+1)] = k2;
198: /* MUTANT (del_stmt) */ /*     k[2] = k3; */ 
198: /* MUTANT (rep_const) */    k[0] = k3;
198: /* MUTANT (rep_const) */    k[1] = k3;
198: /* MUTANT (rep_const) */    k[-1] = k3;
198: /* MUTANT (rep_const) */    k[((2)+1)] = k3;
198: /* MUTANT (rep_const) */    k[((2)-1)] = k3;
199: /* MUTANT (del_stmt) */ /*     k[3] = k4; */ 
199: /* MUTANT (rep_const) */    k[0] = k4;
199: /* MUTANT (rep_const) */    k[1] = k4;
199: /* MUTANT (rep_const) */    k[-1] = k4;
199: /* MUTANT (rep_const) */    k[((3)+1)] = k4;
199: /* MUTANT (rep_const) */    k[((3)-1)] = k4;
200: /* MUTANT (del_stmt) */ /*     k[4] = k5; */ 
200: /* MUTANT (rep_const) */    k[0] = k5;
200: /* MUTANT (rep_const) */    k[1] = k5;
200: /* MUTANT (rep_const) */    k[-1] = k5;
200: /* MUTANT (rep_const) */    k[((4)+1)] = k5;
200: /* MUTANT (rep_const) */    k[((4)-1)] = k5;
201: /* MUTANT (del_stmt) */ /*     k[5] = k6; */ 
201: /* MUTANT (rep_const) */    k[0] = k6;
201: /* MUTANT (rep_const) */    k[1] = k6;
201: /* MUTANT (rep_const) */    k[-1] = k6;
201: /* MUTANT (rep_const) */    k[((5)+1)] = k6;
201: /* MUTANT (rep_const) */    k[((5)-1)] = k6;
202: /* MUTANT (del_stmt) */ /*     k[6] = k7; */ 
202: /* MUTANT (rep_const) */    k[0] = k7;
202: /* MUTANT (rep_const) */    k[1] = k7;
202: /* MUTANT (rep_const) */    k[-1] = k7;
202: /* MUTANT (rep_const) */    k[((6)+1)] = k7;
202: /* MUTANT (rep_const) */    k[((6)-1)] = k7;
203: /* MUTANT (del_stmt) */ /*     k[7] = k8; */ 
203: /* MUTANT (rep_const) */    k[0] = k8;
203: /* MUTANT (rep_const) */    k[1] = k8;
203: /* MUTANT (rep_const) */    k[-1] = k8;
203: /* MUTANT (rep_const) */    k[((7)+1)] = k8;
203: /* MUTANT (rep_const) */    k[((7)-1)] = k8;
204: /* MUTANT (del_stmt) */ /*     k[8] = k9; */ 
204: /* MUTANT (rep_const) */    k[0] = k9;
204: /* MUTANT (rep_const) */    k[1] = k9;
204: /* MUTANT (rep_const) */    k[-1] = k9;
204: /* MUTANT (rep_const) */    k[((8)+1)] = k9;
204: /* MUTANT (rep_const) */    k[((8)-1)] = k9;
205: /* MUTANT (del_stmt) */ /*     k[9] = k10; */ 
205: /* MUTANT (rep_const) */    k[0] = k10;
205: /* MUTANT (rep_const) */    k[1] = k10;
205: /* MUTANT (rep_const) */    k[-1] = k10;
205: /* MUTANT (rep_const) */    k[((9)+1)] = k10;
205: /* MUTANT (rep_const) */    k[((9)-1)] = k10;
206: /* MUTANT (del_stmt) */ /*     return k; */ 
209: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[0], int randomSeed,
209: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[1], int randomSeed,
209: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[-1], int randomSeed,
209: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[((10)+1)], int randomSeed,
209: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[((10)-1)], int randomSeed,
212: /* MUTANT (del_stmt) */ /*     int i; */ 
213: /* MUTANT (del_stmt) */ /*     int j; */ 
214: /* MUTANT (del_stmt) */ /*     int it; */ 
216: /* MUTANT (del_stmt) */ /*     SelectStream(1); */ 
216: /* MUTANT (rep_const) */    SelectStream(0);
216: /* MUTANT (rep_const) */    SelectStream(-1);
216: /* MUTANT (rep_const) */    SelectStream(((1)+1));
217: /* MUTANT (del_stmt) */ /*     PutSeed((long)randomSeed); */ 
220: /* MUTANT (rep_op) */    if (numPlayers <= MAX_PLAYERS || numPlayers < 2)
220: /* MUTANT (rep_op) */    if (numPlayers < MAX_PLAYERS || numPlayers < 2)
220: /* MUTANT (rep_op) */    if (numPlayers >= MAX_PLAYERS || numPlayers < 2)
220: /* MUTANT (rep_op) */    if (numPlayers == MAX_PLAYERS || numPlayers < 2)
220: /* MUTANT (rep_op) */    if (numPlayers != MAX_PLAYERS || numPlayers < 2)
220: /* MUTANT (rep_op) */    if (numPlayers > MAX_PLAYERS && numPlayers < 2)
220: /* MUTANT (rep_op) */    if (numPlayers > MAX_PLAYERS || numPlayers <= 2)
220: /* MUTANT (rep_op) */    if (numPlayers > MAX_PLAYERS || numPlayers > 2)
220: /* MUTANT (rep_op) */    if (numPlayers > MAX_PLAYERS || numPlayers >= 2)
220: /* MUTANT (rep_op) */    if (numPlayers > MAX_PLAYERS || numPlayers == 2)
220: /* MUTANT (rep_op) */    if (numPlayers > MAX_PLAYERS || numPlayers != 2)
220: /* MUTANT (rep_const) */    if (numPlayers > MAX_PLAYERS || numPlayers < 0)
220: /* MUTANT (rep_const) */    if (numPlayers > MAX_PLAYERS || numPlayers < 1)
220: /* MUTANT (rep_const) */    if (numPlayers > MAX_PLAYERS || numPlayers < -1)
220: /* MUTANT (rep_const) */    if (numPlayers > MAX_PLAYERS || numPlayers < ((2)+1))
220: /* MUTANT (rep_const) */    if (numPlayers > MAX_PLAYERS || numPlayers < ((2)-1))
220: /* MUTANT (negate) */    if(! (numPlayers > MAX_PLAYERS || numPlayers < 2))
222: /* MUTANT (del_stmt) */ /*         return -1; */ 
222: /* MUTANT (rep_const) */        return 0;
222: /* MUTANT (rep_const) */        return 1;
222: /* MUTANT (rep_const) */        return ((-1)+1);
222: /* MUTANT (rep_const) */        return ((-1)-1);
229: /* MUTANT (rep_op) */    for (i = 0; i <= 10; i++)
229: /* MUTANT (rep_op) */    for (i = 0; i > 10; i++)
229: /* MUTANT (rep_op) */    for (i = 0; i >= 10; i++)
229: /* MUTANT (rep_op) */    for (i = 0; i == 10; i++)
229: /* MUTANT (rep_op) */    for (i = 0; i != 10; i++)
229: /* MUTANT (rep_op) */    for (i = 0; i < 10; i--)
229: /* MUTANT (rep_const) */    for (i = 1; i < 10; i++)
229: /* MUTANT (rep_const) */    for (i = -1; i < 10; i++)
229: /* MUTANT (rep_const) */    for (i = 0; i < 0; i++)
229: /* MUTANT (rep_const) */    for (i = 0; i < 1; i++)
229: /* MUTANT (rep_const) */    for (i = 0; i < -1; i++)
229: /* MUTANT (rep_const) */    for (i = 0; i < ((10)+1); i++)
229: /* MUTANT (rep_const) */    for (i = 0; i < ((10)-1); i++)
231: /* MUTANT (rep_op) */        for (j = 0; j <= 10; j++)
231: /* MUTANT (rep_op) */        for (j = 0; j > 10; j++)
231: /* MUTANT (rep_op) */        for (j = 0; j >= 10; j++)
231: /* MUTANT (rep_op) */        for (j = 0; j == 10; j++)
231: /* MUTANT (rep_op) */        for (j = 0; j != 10; j++)
231: /* MUTANT (rep_op) */        for (j = 0; j < 10; j--)
231: /* MUTANT (rep_const) */        for (j = 1; j < 10; j++)
231: /* MUTANT (rep_const) */        for (j = -1; j < 10; j++)
231: /* MUTANT (rep_const) */        for (j = 0; j < 0; j++)
231: /* MUTANT (rep_const) */        for (j = 0; j < 1; j++)
231: /* MUTANT (rep_const) */        for (j = 0; j < -1; j++)
231: /* MUTANT (rep_const) */        for (j = 0; j < ((10)+1); j++)
231: /* MUTANT (rep_const) */        for (j = 0; j < ((10)-1); j++)
233: /* MUTANT (rep_op) */            if (j == i && kingdomCards[j] == kingdomCards[i])
233: /* MUTANT (rep_op) */            if (j != i || kingdomCards[j] == kingdomCards[i])
233: /* MUTANT (rep_op) */            if (j != i && kingdomCards[j] != kingdomCards[i])
233: /* MUTANT (negate) */            if(! (j != i && kingdomCards[j] == kingdomCards[i]))
235: /* MUTANT (del_stmt) */ /*                 return -1; */ 
235: /* MUTANT (rep_const) */                return 0;
235: /* MUTANT (rep_const) */                return 1;
235: /* MUTANT (rep_const) */                return ((-1)+1);
235: /* MUTANT (rep_const) */                return ((-1)-1);
245: /* MUTANT (rep_op) */    if (numPlayers != 2)
245: /* MUTANT (rep_const) */    if (numPlayers == 0)
245: /* MUTANT (rep_const) */    if (numPlayers == 1)
245: /* MUTANT (rep_const) */    if (numPlayers == -1)
245: /* MUTANT (rep_const) */    if (numPlayers == ((2)+1))
245: /* MUTANT (rep_const) */    if (numPlayers == ((2)-1))
245: /* MUTANT (negate) */    if(! (numPlayers == 2))
247: /* MUTANT (del_stmt) */ /*         state->supplyCount[curse] = 10; */ 
247: /* MUTANT (rep_const) */        state->supplyCount[curse] = 0;
247: /* MUTANT (rep_const) */        state->supplyCount[curse] = 1;
247: /* MUTANT (rep_const) */        state->supplyCount[curse] = -1;
247: /* MUTANT (rep_const) */        state->supplyCount[curse] = ((10)+1);
247: /* MUTANT (rep_const) */        state->supplyCount[curse] = ((10)-1);
249: /* MUTANT (rep_op) */    else if (numPlayers != 3)
249: /* MUTANT (rep_const) */    else if (numPlayers == 0)
249: /* MUTANT (rep_const) */    else if (numPlayers == 1)
249: /* MUTANT (rep_const) */    else if (numPlayers == -1)
249: /* MUTANT (rep_const) */    else if (numPlayers == ((3)+1))
249: /* MUTANT (rep_const) */    else if (numPlayers == ((3)-1))
249: /* MUTANT (negate) */    else if(! (numPlayers == 3))
251: /* MUTANT (del_stmt) */ /*         state->supplyCount[curse] = 20; */ 
251: /* MUTANT (rep_const) */        state->supplyCount[curse] = 0;
251: /* MUTANT (rep_const) */        state->supplyCount[curse] = 1;
251: /* MUTANT (rep_const) */        state->supplyCount[curse] = -1;
251: /* MUTANT (rep_const) */        state->supplyCount[curse] = ((20)+1);
251: /* MUTANT (rep_const) */        state->supplyCount[curse] = ((20)-1);
255: /* MUTANT (del_stmt) */ /*         state->supplyCount[curse] = 30; */ 
255: /* MUTANT (rep_const) */        state->supplyCount[curse] = 0;
255: /* MUTANT (rep_const) */        state->supplyCount[curse] = 1;
255: /* MUTANT (rep_const) */        state->supplyCount[curse] = -1;
255: /* MUTANT (rep_const) */        state->supplyCount[curse] = ((30)+1);
255: /* MUTANT (rep_const) */        state->supplyCount[curse] = ((30)-1);
259: /* MUTANT (rep_op) */    if (numPlayers != 2)
259: /* MUTANT (rep_const) */    if (numPlayers == 0)
259: /* MUTANT (rep_const) */    if (numPlayers == 1)
259: /* MUTANT (rep_const) */    if (numPlayers == -1)
259: /* MUTANT (rep_const) */    if (numPlayers == ((2)+1))
259: /* MUTANT (rep_const) */    if (numPlayers == ((2)-1))
259: /* MUTANT (negate) */    if(! (numPlayers == 2))
261: /* MUTANT (del_stmt) */ /*         state->supplyCount[estate] = 8; */ 
261: /* MUTANT (rep_const) */        state->supplyCount[estate] = 0;
261: /* MUTANT (rep_const) */        state->supplyCount[estate] = 1;
261: /* MUTANT (rep_const) */        state->supplyCount[estate] = -1;
261: /* MUTANT (rep_const) */        state->supplyCount[estate] = ((8)+1);
261: /* MUTANT (rep_const) */        state->supplyCount[estate] = ((8)-1);
262: /* MUTANT (del_stmt) */ /*         state->supplyCount[duchy] = 8; */ 
262: /* MUTANT (rep_const) */        state->supplyCount[duchy] = 0;
262: /* MUTANT (rep_const) */        state->supplyCount[duchy] = 1;
262: /* MUTANT (rep_const) */        state->supplyCount[duchy] = -1;
262: /* MUTANT (rep_const) */        state->supplyCount[duchy] = ((8)+1);
262: /* MUTANT (rep_const) */        state->supplyCount[duchy] = ((8)-1);
263: /* MUTANT (del_stmt) */ /*         state->supplyCount[province] = 8; */ 
263: /* MUTANT (rep_const) */        state->supplyCount[province] = 0;
263: /* MUTANT (rep_const) */        state->supplyCount[province] = 1;
263: /* MUTANT (rep_const) */        state->supplyCount[province] = -1;
263: /* MUTANT (rep_const) */        state->supplyCount[province] = ((8)+1);
263: /* MUTANT (rep_const) */        state->supplyCount[province] = ((8)-1);
267: /* MUTANT (del_stmt) */ /*         state->supplyCount[estate] = 12; */ 
267: /* MUTANT (rep_const) */        state->supplyCount[estate] = 0;
267: /* MUTANT (rep_const) */        state->supplyCount[estate] = 1;
267: /* MUTANT (rep_const) */        state->supplyCount[estate] = -1;
267: /* MUTANT (rep_const) */        state->supplyCount[estate] = ((12)+1);
267: /* MUTANT (rep_const) */        state->supplyCount[estate] = ((12)-1);
268: /* MUTANT (del_stmt) */ /*         state->supplyCount[duchy] = 12; */ 
268: /* MUTANT (rep_const) */        state->supplyCount[duchy] = 0;
268: /* MUTANT (rep_const) */        state->supplyCount[duchy] = 1;
268: /* MUTANT (rep_const) */        state->supplyCount[duchy] = -1;
268: /* MUTANT (rep_const) */        state->supplyCount[duchy] = ((12)+1);
268: /* MUTANT (rep_const) */        state->supplyCount[duchy] = ((12)-1);
269: /* MUTANT (del_stmt) */ /*         state->supplyCount[province] = 12; */ 
269: /* MUTANT (rep_const) */        state->supplyCount[province] = 0;
269: /* MUTANT (rep_const) */        state->supplyCount[province] = 1;
269: /* MUTANT (rep_const) */        state->supplyCount[province] = -1;
269: /* MUTANT (rep_const) */        state->supplyCount[province] = ((12)+1);
269: /* MUTANT (rep_const) */        state->supplyCount[province] = ((12)-1);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = 0 - (7 * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = 1 - (7 * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = -1 - (7 * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = ((60)+1) - (7 * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = ((60)-1) - (7 * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = 60 - (0 * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = 60 - (1 * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = 60 - (-1 * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = 60 - (((7)+1) * numPlayers);
273: /* MUTANT (rep_const) */    state->supplyCount[copper] = 60 - (((7)-1) * numPlayers);
274: /* MUTANT (del_stmt) */ /*     state->supplyCount[silver] = 40; */ 
274: /* MUTANT (rep_const) */    state->supplyCount[silver] = 0;
274: /* MUTANT (rep_const) */    state->supplyCount[silver] = 1;
274: /* MUTANT (rep_const) */    state->supplyCount[silver] = -1;
274: /* MUTANT (rep_const) */    state->supplyCount[silver] = ((40)+1);
274: /* MUTANT (rep_const) */    state->supplyCount[silver] = ((40)-1);
275: /* MUTANT (del_stmt) */ /*     state->supplyCount[gold] = 30; */ 
275: /* MUTANT (rep_const) */    state->supplyCount[gold] = 0;
275: /* MUTANT (rep_const) */    state->supplyCount[gold] = 1;
275: /* MUTANT (rep_const) */    state->supplyCount[gold] = -1;
275: /* MUTANT (rep_const) */    state->supplyCount[gold] = ((30)+1);
275: /* MUTANT (rep_const) */    state->supplyCount[gold] = ((30)-1);
278: /* MUTANT (rep_op) */    for (i = adventurer; i < treasure_map; i++)        //loop all cards
278: /* MUTANT (rep_op) */    for (i = adventurer; i > treasure_map; i++)        //loop all cards
278: /* MUTANT (rep_op) */    for (i = adventurer; i >= treasure_map; i++)        //loop all cards
278: /* MUTANT (rep_op) */    for (i = adventurer; i == treasure_map; i++)        //loop all cards
278: /* MUTANT (rep_op) */    for (i = adventurer; i != treasure_map; i++)        //loop all cards
278: /* MUTANT (rep_op) */    for (i = adventurer; i <= treasure_map; i--)        //loop all cards
280: /* MUTANT (rep_op) */        for (j = 0; j <= 10; j++)                        //loop chosen cards
280: /* MUTANT (rep_op) */        for (j = 0; j > 10; j++)                        //loop chosen cards
280: /* MUTANT (rep_op) */        for (j = 0; j >= 10; j++)                        //loop chosen cards
280: /* MUTANT (rep_op) */        for (j = 0; j == 10; j++)                        //loop chosen cards
280: /* MUTANT (rep_op) */        for (j = 0; j != 10; j++)                        //loop chosen cards
280: /* MUTANT (rep_op) */        for (j = 0; j < 10; j--)                        //loop chosen cards
280: /* MUTANT (rep_const) */        for (j = 1; j < 10; j++)                        //loop chosen cards
280: /* MUTANT (rep_const) */        for (j = -1; j < 10; j++)                        //loop chosen cards
280: /* MUTANT (rep_const) */        for (j = 0; j < 0; j++)                        //loop chosen cards
280: /* MUTANT (rep_const) */        for (j = 0; j < 1; j++)                        //loop chosen cards
280: /* MUTANT (rep_const) */        for (j = 0; j < -1; j++)                        //loop chosen cards
280: /* MUTANT (rep_const) */        for (j = 0; j < ((10)+1); j++)                        //loop chosen cards
280: /* MUTANT (rep_const) */        for (j = 0; j < ((10)-1); j++)                        //loop chosen cards
282: /* MUTANT (rep_op) */            if (kingdomCards[j] != i)
282: /* MUTANT (negate) */            if(! (kingdomCards[j] == i))
285: /* MUTANT (rep_op) */                if (kingdomCards[j] != great_hall || kingdomCards[j] == gardens)
285: /* MUTANT (rep_op) */                if (kingdomCards[j] == great_hall && kingdomCards[j] == gardens)
285: /* MUTANT (rep_op) */                if (kingdomCards[j] == great_hall || kingdomCards[j] != gardens)
285: /* MUTANT (negate) */                if(! (kingdomCards[j] == great_hall || kingdomCards[j] == gardens))
287: /* MUTANT (rep_op) */                    if (numPlayers != 2) {
287: /* MUTANT (rep_const) */                    if (numPlayers == 0) {
287: /* MUTANT (rep_const) */                    if (numPlayers == 1) {
287: /* MUTANT (rep_const) */                    if (numPlayers == -1) {
287: /* MUTANT (rep_const) */                    if (numPlayers == ((2)+1)) {
287: /* MUTANT (rep_const) */                    if (numPlayers == ((2)-1)) {
287: /* MUTANT (negate) */                    if(! (numPlayers == 2)) {
288: /* MUTANT (del_stmt) */ /*                         state->supplyCount[i] = 8; */ 
288: /* MUTANT (rep_const) */                        state->supplyCount[i] = 0;
288: /* MUTANT (rep_const) */                        state->supplyCount[i] = 1;
288: /* MUTANT (rep_const) */                        state->supplyCount[i] = -1;
288: /* MUTANT (rep_const) */                        state->supplyCount[i] = ((8)+1);
288: /* MUTANT (rep_const) */                        state->supplyCount[i] = ((8)-1);
290: /* MUTANT (rep_const) */                    else{ state->supplyCount[i] = 0; }
290: /* MUTANT (rep_const) */                    else{ state->supplyCount[i] = 1; }
290: /* MUTANT (rep_const) */                    else{ state->supplyCount[i] = -1; }
290: /* MUTANT (rep_const) */                    else{ state->supplyCount[i] = ((12)+1); }
290: /* MUTANT (rep_const) */                    else{ state->supplyCount[i] = ((12)-1); }
294: /* MUTANT (del_stmt) */ /*                     state->supplyCount[i] = 10; */ 
294: /* MUTANT (rep_const) */                    state->supplyCount[i] = 0;
294: /* MUTANT (rep_const) */                    state->supplyCount[i] = 1;
294: /* MUTANT (rep_const) */                    state->supplyCount[i] = -1;
294: /* MUTANT (rep_const) */                    state->supplyCount[i] = ((10)+1);
294: /* MUTANT (rep_const) */                    state->supplyCount[i] = ((10)-1);
300: /* MUTANT (del_stmt) */ /*                 state->supplyCount[i] = -1; */ 
300: /* MUTANT (rep_const) */                state->supplyCount[i] = 0;
300: /* MUTANT (rep_const) */                state->supplyCount[i] = 1;
300: /* MUTANT (rep_const) */                state->supplyCount[i] = ((-1)+1);
300: /* MUTANT (rep_const) */                state->supplyCount[i] = ((-1)-1);
310: /* MUTANT (rep_op) */    for (i = 0; i <= numPlayers; i++)
310: /* MUTANT (rep_op) */    for (i = 0; i > numPlayers; i++)
310: /* MUTANT (rep_op) */    for (i = 0; i >= numPlayers; i++)
310: /* MUTANT (rep_op) */    for (i = 0; i == numPlayers; i++)
310: /* MUTANT (rep_op) */    for (i = 0; i != numPlayers; i++)
310: /* MUTANT (rep_op) */    for (i = 0; i < numPlayers; i--)
310: /* MUTANT (rep_const) */    for (i = 1; i < numPlayers; i++)
310: /* MUTANT (rep_const) */    for (i = -1; i < numPlayers; i++)
312: /* MUTANT (del_stmt) */ /*         state->deckCount[i] = 0; */ 
312: /* MUTANT (rep_const) */        state->deckCount[i] = 1;
312: /* MUTANT (rep_const) */        state->deckCount[i] = -1;
313: /* MUTANT (rep_op) */        for (j = 0; j <= 3; j++)
313: /* MUTANT (rep_op) */        for (j = 0; j > 3; j++)
313: /* MUTANT (rep_op) */        for (j = 0; j >= 3; j++)
313: /* MUTANT (rep_op) */        for (j = 0; j == 3; j++)
313: /* MUTANT (rep_op) */        for (j = 0; j != 3; j++)
313: /* MUTANT (rep_op) */        for (j = 0; j < 3; j--)
313: /* MUTANT (rep_const) */        for (j = 1; j < 3; j++)
313: /* MUTANT (rep_const) */        for (j = -1; j < 3; j++)
313: /* MUTANT (rep_const) */        for (j = 0; j < 0; j++)
313: /* MUTANT (rep_const) */        for (j = 0; j < 1; j++)
313: /* MUTANT (rep_const) */        for (j = 0; j < -1; j++)
313: /* MUTANT (rep_const) */        for (j = 0; j < ((3)+1); j++)
313: /* MUTANT (rep_const) */        for (j = 0; j < ((3)-1); j++)
315: /* MUTANT (del_stmt) */ /*             state->deck[i][j] = estate; */ 
316: /* MUTANT (del_stmt) */ /*             state->deckCount[i]++; */ 
316: /* MUTANT (rep_op) */            state->deckCount[i]--;
318: /* MUTANT (rep_op) */        for (j = 3; j <= 10; j++)
318: /* MUTANT (rep_op) */        for (j = 3; j > 10; j++)
318: /* MUTANT (rep_op) */        for (j = 3; j >= 10; j++)
318: /* MUTANT (rep_op) */        for (j = 3; j == 10; j++)
318: /* MUTANT (rep_op) */        for (j = 3; j != 10; j++)
318: /* MUTANT (rep_op) */        for (j = 3; j < 10; j--)
318: /* MUTANT (rep_const) */        for (j = 0; j < 10; j++)
318: /* MUTANT (rep_const) */        for (j = 1; j < 10; j++)
318: /* MUTANT (rep_const) */        for (j = -1; j < 10; j++)
318: /* MUTANT (rep_const) */        for (j = ((3)+1); j < 10; j++)
318: /* MUTANT (rep_const) */        for (j = ((3)-1); j < 10; j++)
318: /* MUTANT (rep_const) */        for (j = 3; j < 0; j++)
318: /* MUTANT (rep_const) */        for (j = 3; j < 1; j++)
318: /* MUTANT (rep_const) */        for (j = 3; j < -1; j++)
318: /* MUTANT (rep_const) */        for (j = 3; j < ((10)+1); j++)
318: /* MUTANT (rep_const) */        for (j = 3; j < ((10)-1); j++)
320: /* MUTANT (del_stmt) */ /*             state->deck[i][j] = copper; */ 
321: /* MUTANT (del_stmt) */ /*             state->deckCount[i]++; */ 
321: /* MUTANT (rep_op) */            state->deckCount[i]--;
326: /* MUTANT (rep_op) */    for (i = 0; i <= numPlayers; i++)
326: /* MUTANT (rep_op) */    for (i = 0; i > numPlayers; i++)
326: /* MUTANT (rep_op) */    for (i = 0; i >= numPlayers; i++)
326: /* MUTANT (rep_op) */    for (i = 0; i == numPlayers; i++)
326: /* MUTANT (rep_op) */    for (i = 0; i != numPlayers; i++)
326: /* MUTANT (rep_op) */    for (i = 0; i < numPlayers; i--)
326: /* MUTANT (rep_const) */    for (i = 1; i < numPlayers; i++)
326: /* MUTANT (rep_const) */    for (i = -1; i < numPlayers; i++)
328: /* MUTANT (rep_op) */        if ( shuffle(i, state) <= 0 )
328: /* MUTANT (rep_op) */        if ( shuffle(i, state) > 0 )
328: /* MUTANT (rep_op) */        if ( shuffle(i, state) >= 0 )
328: /* MUTANT (rep_op) */        if ( shuffle(i, state) == 0 )
328: /* MUTANT (rep_op) */        if ( shuffle(i, state) != 0 )
328: /* MUTANT (rep_const) */        if ( shuffle(i, state) < 1 )
328: /* MUTANT (rep_const) */        if ( shuffle(i, state) < -1 )
328: /* MUTANT (negate) */        if(! ( shuffle(i, state) < 0 ))
330: /* MUTANT (del_stmt) */ /*             return -1; */ 
330: /* MUTANT (rep_const) */            return 0;
330: /* MUTANT (rep_const) */            return 1;
330: /* MUTANT (rep_const) */            return ((-1)+1);
330: /* MUTANT (rep_const) */            return ((-1)-1);
335: /* MUTANT (rep_op) */    for (i = 0; i <= numPlayers; i++)
335: /* MUTANT (rep_op) */    for (i = 0; i > numPlayers; i++)
335: /* MUTANT (rep_op) */    for (i = 0; i >= numPlayers; i++)
335: /* MUTANT (rep_op) */    for (i = 0; i == numPlayers; i++)
335: /* MUTANT (rep_op) */    for (i = 0; i != numPlayers; i++)
335: /* MUTANT (rep_op) */    for (i = 0; i < numPlayers; i--)
335: /* MUTANT (rep_const) */    for (i = 1; i < numPlayers; i++)
335: /* MUTANT (rep_const) */    for (i = -1; i < numPlayers; i++)
338: /* MUTANT (del_stmt) */ /*         state->handCount[i] = 0; */ 
338: /* MUTANT (rep_const) */        state->handCount[i] = 1;
338: /* MUTANT (rep_const) */        state->handCount[i] = -1;
339: /* MUTANT (del_stmt) */ /*         state->discardCount[i] = 0; */ 
339: /* MUTANT (rep_const) */        state->discardCount[i] = 1;
339: /* MUTANT (rep_const) */        state->discardCount[i] = -1;
348: /* MUTANT (rep_op) */    for (i = 0; i < treasure_map; i++)
348: /* MUTANT (rep_op) */    for (i = 0; i > treasure_map; i++)
348: /* MUTANT (rep_op) */    for (i = 0; i >= treasure_map; i++)
348: /* MUTANT (rep_op) */    for (i = 0; i == treasure_map; i++)
348: /* MUTANT (rep_op) */    for (i = 0; i != treasure_map; i++)
348: /* MUTANT (rep_op) */    for (i = 0; i <= treasure_map; i--)
348: /* MUTANT (rep_const) */    for (i = 1; i <= treasure_map; i++)
348: /* MUTANT (rep_const) */    for (i = -1; i <= treasure_map; i++)
350: /* MUTANT (del_stmt) */ /*         state->embargoTokens[i] = 0; */ 
350: /* MUTANT (rep_const) */        state->embargoTokens[i] = 1;
350: /* MUTANT (rep_const) */        state->embargoTokens[i] = -1;
354: /* MUTANT (rep_const) */    state->outpostPlayed = 1;
354: /* MUTANT (rep_const) */    state->outpostPlayed = -1;
355: /* MUTANT (del_stmt) */ /*     state->phase = 0; */ 
355: /* MUTANT (rep_const) */    state->phase = 1;
355: /* MUTANT (rep_const) */    state->phase = -1;
356: /* MUTANT (del_stmt) */ /*     state->numActions = 1; */ 
356: /* MUTANT (rep_const) */    state->numActions = 0;
356: /* MUTANT (rep_const) */    state->numActions = -1;
356: /* MUTANT (rep_const) */    state->numActions = ((1)+1);
357: /* MUTANT (del_stmt) */ /*     state->numBuys = 1; */ 
357: /* MUTANT (rep_const) */    state->numBuys = 0;
357: /* MUTANT (rep_const) */    state->numBuys = -1;
357: /* MUTANT (rep_const) */    state->numBuys = ((1)+1);
358: /* MUTANT (del_stmt) */ /*     state->playedCardCount = 0; */ 
358: /* MUTANT (rep_const) */    state->playedCardCount = 1;
358: /* MUTANT (rep_const) */    state->playedCardCount = -1;
359: /* MUTANT (del_stmt) */ /*     state->whoseTurn = 0; */ 
359: /* MUTANT (rep_const) */    state->whoseTurn = 1;
359: /* MUTANT (rep_const) */    state->whoseTurn = -1;
360: /* MUTANT (del_stmt) */ /*     state->handCount[state->whoseTurn] = 0; */ 
360: /* MUTANT (rep_const) */    state->handCount[state->whoseTurn] = 1;
360: /* MUTANT (rep_const) */    state->handCount[state->whoseTurn] = -1;
364: /* MUTANT (rep_op) */    for (it = 0; it <= 5; it++) {
364: /* MUTANT (rep_op) */    for (it = 0; it > 5; it++) {
364: /* MUTANT (rep_op) */    for (it = 0; it >= 5; it++) {
364: /* MUTANT (rep_op) */    for (it = 0; it == 5; it++) {
364: /* MUTANT (rep_op) */    for (it = 0; it != 5; it++) {
364: /* MUTANT (rep_op) */    for (it = 0; it < 5; it--) {
364: /* MUTANT (rep_const) */    for (it = 1; it < 5; it++) {
364: /* MUTANT (rep_const) */    for (it = -1; it < 5; it++) {
364: /* MUTANT (rep_const) */    for (it = 0; it < 0; it++) {
364: /* MUTANT (rep_const) */    for (it = 0; it < 1; it++) {
364: /* MUTANT (rep_const) */    for (it = 0; it < -1; it++) {
364: /* MUTANT (rep_const) */    for (it = 0; it < ((5)+1); it++) {
364: /* MUTANT (rep_const) */    for (it = 0; it < ((5)-1); it++) {
365: /* MUTANT (del_stmt) */ /*         drawCard(state->whoseTurn, state); */ 
368: /* MUTANT (rep_const) */    updateCoins(state->whoseTurn, state, 1);
368: /* MUTANT (rep_const) */    updateCoins(state->whoseTurn, state, -1);
370: /* MUTANT (del_stmt) */ /*     return 0; */ 
370: /* MUTANT (rep_const) */    return 1;
370: /* MUTANT (rep_const) */    return -1;
374: /* MUTANT (del_stmt) */ /*     int newDeck[MAX_DECK]; */ 
375: /* MUTANT (del_stmt) */ /*     int newDeckPos = 0; */ 
375: /* MUTANT (rep_const) */    int newDeckPos = 1;
375: /* MUTANT (rep_const) */    int newDeckPos = -1;
376: /* MUTANT (del_stmt) */ /*     int card; */ 
377: /* MUTANT (del_stmt) */ /*     int i; */ 
379: /* MUTANT (rep_op) */    if (state->deckCount[player] <= 1)
379: /* MUTANT (rep_op) */    if (state->deckCount[player] > 1)
379: /* MUTANT (rep_op) */    if (state->deckCount[player] >= 1)
379: /* MUTANT (rep_op) */    if (state->deckCount[player] == 1)
379: /* MUTANT (rep_op) */    if (state->deckCount[player] != 1)
379: /* MUTANT (rep_const) */    if (state->deckCount[player] < 0)
379: /* MUTANT (rep_const) */    if (state->deckCount[player] < -1)
379: /* MUTANT (rep_const) */    if (state->deckCount[player] < ((1)+1))
379: /* MUTANT (negate) */    if(! (state->deckCount[player] < 1))
380: /* MUTANT (rep_const) */        return 0;
380: /* MUTANT (rep_const) */        return 1;
380: /* MUTANT (rep_const) */        return ((-1)+1);
380: /* MUTANT (rep_const) */        return ((-1)-1);
381: /* MUTANT (del_stmt) */ /*     qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); */ 
384: /* MUTANT (rep_op) */    while (state->deckCount[player] <= 0) {
384: /* MUTANT (rep_op) */    while (state->deckCount[player] < 0) {
384: /* MUTANT (rep_op) */    while (state->deckCount[player] >= 0) {
384: /* MUTANT (rep_op) */    while (state->deckCount[player] == 0) {
384: /* MUTANT (rep_op) */    while (state->deckCount[player] != 0) {
384: /* MUTANT (rep_const) */    while (state->deckCount[player] > 1) {
384: /* MUTANT (rep_const) */    while (state->deckCount[player] > -1) {
384: /* MUTANT (negate) */    while(! (state->deckCount[player] > 0)) {
385: /* MUTANT (del_stmt) */ /*         card = floor(Random() * state->deckCount[player]); */ 
386: /* MUTANT (del_stmt) */ /*         newDeck[newDeckPos] = state->deck[player][card]; */ 
387: /* MUTANT (del_stmt) */ /*         newDeckPos++; */ 
387: /* MUTANT (rep_op) */        newDeckPos--;
388: /* MUTANT (rep_op) */        for (i = card; i <= state->deckCount[player]-1; i++) {
388: /* MUTANT (rep_op) */        for (i = card; i > state->deckCount[player]-1; i++) {
388: /* MUTANT (rep_op) */        for (i = card; i >= state->deckCount[player]-1; i++) {
388: /* MUTANT (rep_op) */        for (i = card; i == state->deckCount[player]-1; i++) {
388: /* MUTANT (rep_op) */        for (i = card; i != state->deckCount[player]-1; i++) {
388: /* MUTANT (rep_op) */        for (i = card; i < state->deckCount[player]-1; i--) {
388: /* MUTANT (rep_const) */        for (i = card; i < state->deckCount[player]0; i++) {
388: /* MUTANT (rep_const) */        for (i = card; i < state->deckCount[player]1; i++) {
388: /* MUTANT (rep_const) */        for (i = card; i < state->deckCount[player]((-1)+1); i++) {
388: /* MUTANT (rep_const) */        for (i = card; i < state->deckCount[player]((-1)-1); i++) {
389: /* MUTANT (del_stmt) */ /*             state->deck[player][i] = state->deck[player][i+1]; */ 
389: /* MUTANT (rep_op) */            state->deck[player][i] = state->deck[player][i-1];
389: /* MUTANT (rep_op) */            state->deck[player][i] = state->deck[player][i*1];
389: /* MUTANT (rep_op) */            state->deck[player][i] = state->deck[player][i%1];
389: /* MUTANT (rep_const) */            state->deck[player][i] = state->deck[player][i+0];
389: /* MUTANT (rep_const) */            state->deck[player][i] = state->deck[player][i+-1];
389: /* MUTANT (rep_const) */            state->deck[player][i] = state->deck[player][i+((1)+1)];
391: /* MUTANT (rep_op) */        state->deckCount[player]++;
393: /* MUTANT (rep_op) */    for (i = 0; i <= newDeckPos; i++) {
393: /* MUTANT (rep_op) */    for (i = 0; i > newDeckPos; i++) {
393: /* MUTANT (rep_op) */    for (i = 0; i >= newDeckPos; i++) {
393: /* MUTANT (rep_op) */    for (i = 0; i == newDeckPos; i++) {
393: /* MUTANT (rep_op) */    for (i = 0; i != newDeckPos; i++) {
393: /* MUTANT (rep_op) */    for (i = 0; i < newDeckPos; i--) {
393: /* MUTANT (rep_const) */    for (i = 1; i < newDeckPos; i++) {
393: /* MUTANT (rep_const) */    for (i = -1; i < newDeckPos; i++) {
394: /* MUTANT (del_stmt) */ /*         state->deck[player][i] = newDeck[i]; */ 
395: /* MUTANT (del_stmt) */ /*         state->deckCount[player]++; */ 
395: /* MUTANT (rep_op) */        state->deckCount[player]--;
398: /* MUTANT (rep_const) */    return 1;
398: /* MUTANT (rep_const) */    return -1;
403: /* MUTANT (del_stmt) */ /*     int card; */ 
404: /* MUTANT (del_stmt) */ /*     int coin_bonus = 0; */          //tracks coins gain from actions
404: /* MUTANT (rep_const) */    int coin_bonus = 1;         //tracks coins gain from actions
404: /* MUTANT (rep_const) */    int coin_bonus = -1;         //tracks coins gain from actions
407: /* MUTANT (rep_op) */    if (state->phase == 0)
407: /* MUTANT (rep_const) */    if (state->phase != 1)
407: /* MUTANT (rep_const) */    if (state->phase != -1)
407: /* MUTANT (negate) */    if(! (state->phase != 0))
409: /* MUTANT (del_stmt) */ /*         return -1; */ 
409: /* MUTANT (rep_const) */        return 0;
409: /* MUTANT (rep_const) */        return 1;
409: /* MUTANT (rep_const) */        return ((-1)+1);
409: /* MUTANT (rep_const) */        return ((-1)-1);
413: /* MUTANT (rep_op) */    if ( state->numActions <= 1 )
413: /* MUTANT (rep_op) */    if ( state->numActions > 1 )
413: /* MUTANT (rep_op) */    if ( state->numActions >= 1 )
413: /* MUTANT (rep_op) */    if ( state->numActions == 1 )
413: /* MUTANT (rep_op) */    if ( state->numActions != 1 )
413: /* MUTANT (rep_const) */    if ( state->numActions < 0 )
413: /* MUTANT (rep_const) */    if ( state->numActions < -1 )
413: /* MUTANT (rep_const) */    if ( state->numActions < ((1)+1) )
413: /* MUTANT (negate) */    if(! ( state->numActions < 1 ))
415: /* MUTANT (del_stmt) */ /*         return -1; */ 
415: /* MUTANT (rep_const) */        return 0;
415: /* MUTANT (rep_const) */        return 1;
415: /* MUTANT (rep_const) */        return ((-1)+1);
415: /* MUTANT (rep_const) */        return ((-1)-1);
422: /* MUTANT (rep_op) */    if ( card <= adventurer || card > treasure_map )
422: /* MUTANT (rep_op) */    if ( card > adventurer || card > treasure_map )
422: /* MUTANT (rep_op) */    if ( card >= adventurer || card > treasure_map )
422: /* MUTANT (rep_op) */    if ( card == adventurer || card > treasure_map )
422: /* MUTANT (rep_op) */    if ( card != adventurer || card > treasure_map )
422: /* MUTANT (rep_op) */    if ( card < adventurer && card > treasure_map )
422: /* MUTANT (rep_op) */    if ( card < adventurer || card <= treasure_map )
422: /* MUTANT (rep_op) */    if ( card < adventurer || card < treasure_map )
422: /* MUTANT (rep_op) */    if ( card < adventurer || card >= treasure_map )
422: /* MUTANT (rep_op) */    if ( card < adventurer || card == treasure_map )
422: /* MUTANT (rep_op) */    if ( card < adventurer || card != treasure_map )
422: /* MUTANT (negate) */    if(! ( card < adventurer || card > treasure_map ))
424: /* MUTANT (del_stmt) */ /*         return -1; */ 
424: /* MUTANT (rep_const) */        return 0;
424: /* MUTANT (rep_const) */        return 1;
424: /* MUTANT (rep_const) */        return ((-1)+1);
424: /* MUTANT (rep_const) */        return ((-1)-1);
428: /* MUTANT (rep_op) */    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) <= 0 )
428: /* MUTANT (rep_op) */    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) > 0 )
428: /* MUTANT (rep_op) */    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) >= 0 )
428: /* MUTANT (rep_op) */    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) == 0 )
428: /* MUTANT (rep_op) */    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) != 0 )
428: /* MUTANT (rep_const) */    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 1 )
428: /* MUTANT (rep_const) */    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < -1 )
428: /* MUTANT (negate) */    if(! ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ))
430: /* MUTANT (del_stmt) */ /*         return -1; */ 
430: /* MUTANT (rep_const) */        return 0;
430: /* MUTANT (rep_const) */        return 1;
430: /* MUTANT (rep_const) */        return ((-1)+1);
430: /* MUTANT (rep_const) */        return ((-1)-1);
434: /* MUTANT (rep_op) */    state->numActions++;
437: /* MUTANT (del_stmt) */ /*     updateCoins(state->whoseTurn, state, coin_bonus); */ 
439: /* MUTANT (del_stmt) */ /*     return 0; */ 
439: /* MUTANT (rep_const) */    return 1;
439: /* MUTANT (rep_const) */    return -1;
443: /* MUTANT (del_stmt) */ /*     int who; */ 
444: /* MUTANT (negate) */    if(! (DEBUG)) {
445: /* MUTANT (del_stmt) */ /*         printf("Entering buyCard...\n"); */ 
452: /* MUTANT (rep_op) */    if (state->numBuys <= 1) {
452: /* MUTANT (rep_op) */    if (state->numBuys > 1) {
452: /* MUTANT (rep_op) */    if (state->numBuys >= 1) {
452: /* MUTANT (rep_op) */    if (state->numBuys == 1) {
452: /* MUTANT (rep_op) */    if (state->numBuys != 1) {
452: /* MUTANT (rep_const) */    if (state->numBuys < 0) {
452: /* MUTANT (rep_const) */    if (state->numBuys < -1) {
452: /* MUTANT (rep_const) */    if (state->numBuys < ((1)+1)) {
452: /* MUTANT (negate) */    if(! (state->numBuys < 1)) {
453: /* MUTANT (negate) */        if(! (DEBUG))
455: /* MUTANT (del_stmt) */ /*         return -1; */ 
455: /* MUTANT (rep_const) */        return 0;
455: /* MUTANT (rep_const) */        return 1;
455: /* MUTANT (rep_const) */        return ((-1)+1);
455: /* MUTANT (rep_const) */        return ((-1)-1);
456: /* MUTANT (rep_op) */    } else if (supplyCount(supplyPos, state) <=1) {
456: /* MUTANT (rep_op) */    } else if (supplyCount(supplyPos, state) >1) {
456: /* MUTANT (rep_op) */    } else if (supplyCount(supplyPos, state) >=1) {
456: /* MUTANT (rep_op) */    } else if (supplyCount(supplyPos, state) ==1) {
456: /* MUTANT (rep_op) */    } else if (supplyCount(supplyPos, state) !=1) {
456: /* MUTANT (rep_const) */    } else if (supplyCount(supplyPos, state) <0) {
456: /* MUTANT (rep_const) */    } else if (supplyCount(supplyPos, state) <-1) {
456: /* MUTANT (rep_const) */    } else if (supplyCount(supplyPos, state) <((1)+1)) {
456: /* MUTANT (negate) */    } else if(! (supplyCount(supplyPos, state) <1)) {
457: /* MUTANT (negate) */        if(! (DEBUG))
459: /* MUTANT (del_stmt) */ /*         return -1; */ 
459: /* MUTANT (rep_const) */        return 0;
459: /* MUTANT (rep_const) */        return 1;
459: /* MUTANT (rep_const) */        return ((-1)+1);
459: /* MUTANT (rep_const) */        return ((-1)-1);
460: /* MUTANT (rep_op) */    } else if (state->coins <= getCost(supplyPos)) {
460: /* MUTANT (rep_op) */    } else if (state->coins > getCost(supplyPos)) {
460: /* MUTANT (rep_op) */    } else if (state->coins >= getCost(supplyPos)) {
460: /* MUTANT (rep_op) */    } else if (state->coins == getCost(supplyPos)) {
460: /* MUTANT (rep_op) */    } else if (state->coins != getCost(supplyPos)) {
460: /* MUTANT (negate) */    } else if(! (state->coins < getCost(supplyPos))) {
461: /* MUTANT (negate) */        if(! (DEBUG))
463: /* MUTANT (del_stmt) */ /*         return -1; */ 
463: /* MUTANT (rep_const) */        return 0;
463: /* MUTANT (rep_const) */        return 1;
463: /* MUTANT (rep_const) */        return ((-1)+1);
463: /* MUTANT (rep_const) */        return ((-1)-1);
465: /* MUTANT (del_stmt) */ /*         state->phase=1; */ 
465: /* MUTANT (rep_const) */        state->phase=0;
465: /* MUTANT (rep_const) */        state->phase=-1;
465: /* MUTANT (rep_const) */        state->phase=((1)+1);
467: /* MUTANT (del_stmt) */ /*         gainCard(supplyPos, state, 0, who); */  //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
467: /* MUTANT (rep_const) */        gainCard(supplyPos, state, 1, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
467: /* MUTANT (rep_const) */        gainCard(supplyPos, state, -1, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
469: /* MUTANT (del_stmt) */ /*         state->coins = (state->coins) - (getCost(supplyPos)); */ 
470: /* MUTANT (del_stmt) */ /*         state->numBuys--; */ 
470: /* MUTANT (rep_op) */        state->numBuys++;
471: /* MUTANT (negate) */        if(! (DEBUG))
478: /* MUTANT (rep_const) */    return 1;
478: /* MUTANT (rep_const) */    return -1;
482: /* MUTANT (del_stmt) */ /*     return state->handCount[ whoseTurn(state) ]; */ 
486: /* MUTANT (del_stmt) */ /*     int currentPlayer = whoseTurn(state); */ 
487: /* MUTANT (del_stmt) */ /*     return state->hand[currentPlayer][handPos]; */ 
491: /* MUTANT (del_stmt) */ /*     return state->supplyCount[card]; */ 
495: /* MUTANT (del_stmt) */ /*     int i; */ 
496: /* MUTANT (del_stmt) */ /*     int count = 0; */ 
496: /* MUTANT (rep_const) */    int count = 1;
496: /* MUTANT (rep_const) */    int count = -1;
498: /* MUTANT (rep_op) */    for (i = 0; i <= state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */    for (i = 0; i > state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */    for (i = 0; i >= state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */    for (i = 0; i == state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */    for (i = 0; i != state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */    for (i = 0; i < state->deckCount[player]; i--)
498: /* MUTANT (rep_const) */    for (i = 1; i < state->deckCount[player]; i++)
498: /* MUTANT (rep_const) */    for (i = -1; i < state->deckCount[player]; i++)
500: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == card) count++; */ 
500: /* MUTANT (rep_op) */        if (state->deck[player][i] != card) count++;
500: /* MUTANT (rep_op) */        if (state->deck[player][i] == card) count--;
500: /* MUTANT (negate) */        if(! (state->deck[player][i] == card)) count++;
503: /* MUTANT (rep_op) */    for (i = 0; i <= state->handCount[player]; i++)
503: /* MUTANT (rep_op) */    for (i = 0; i > state->handCount[player]; i++)
503: /* MUTANT (rep_op) */    for (i = 0; i >= state->handCount[player]; i++)
503: /* MUTANT (rep_op) */    for (i = 0; i == state->handCount[player]; i++)
503: /* MUTANT (rep_op) */    for (i = 0; i != state->handCount[player]; i++)
503: /* MUTANT (rep_op) */    for (i = 0; i < state->handCount[player]; i--)
503: /* MUTANT (rep_const) */    for (i = 1; i < state->handCount[player]; i++)
503: /* MUTANT (rep_const) */    for (i = -1; i < state->handCount[player]; i++)
505: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == card) count++; */ 
505: /* MUTANT (rep_op) */        if (state->hand[player][i] != card) count++;
505: /* MUTANT (rep_op) */        if (state->hand[player][i] == card) count--;
505: /* MUTANT (negate) */        if(! (state->hand[player][i] == card)) count++;
508: /* MUTANT (rep_op) */    for (i = 0; i <= state->discardCount[player]; i++)
508: /* MUTANT (rep_op) */    for (i = 0; i > state->discardCount[player]; i++)
508: /* MUTANT (rep_op) */    for (i = 0; i >= state->discardCount[player]; i++)
508: /* MUTANT (rep_op) */    for (i = 0; i == state->discardCount[player]; i++)
508: /* MUTANT (rep_op) */    for (i = 0; i != state->discardCount[player]; i++)
508: /* MUTANT (rep_op) */    for (i = 0; i < state->discardCount[player]; i--)
508: /* MUTANT (rep_const) */    for (i = 1; i < state->discardCount[player]; i++)
508: /* MUTANT (rep_const) */    for (i = -1; i < state->discardCount[player]; i++)
510: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == card) count++; */ 
510: /* MUTANT (rep_op) */        if (state->discard[player][i] != card) count++;
510: /* MUTANT (rep_op) */        if (state->discard[player][i] == card) count--;
510: /* MUTANT (negate) */        if(! (state->discard[player][i] == card)) count++;
517: /* MUTANT (del_stmt) */ /*     return state->whoseTurn; */ 
521: /* MUTANT (del_stmt) */ /*     int k; */ 
522: /* MUTANT (del_stmt) */ /*     int i; */ 
523: /* MUTANT (del_stmt) */ /*     int currentPlayer = whoseTurn(state); */ 
526: /* MUTANT (rep_op) */    for (i = 0; i <= state->handCount[currentPlayer]; i++) {
526: /* MUTANT (rep_op) */    for (i = 0; i > state->handCount[currentPlayer]; i++) {
526: /* MUTANT (rep_op) */    for (i = 0; i >= state->handCount[currentPlayer]; i++) {
526: /* MUTANT (rep_op) */    for (i = 0; i == state->handCount[currentPlayer]; i++) {
526: /* MUTANT (rep_op) */    for (i = 0; i != state->handCount[currentPlayer]; i++) {
526: /* MUTANT (rep_op) */    for (i = 0; i < state->handCount[currentPlayer]; i--) {
526: /* MUTANT (rep_const) */    for (i = 1; i < state->handCount[currentPlayer]; i++) {
526: /* MUTANT (rep_const) */    for (i = -1; i < state->handCount[currentPlayer]; i++) {
527: /* MUTANT (del_stmt) */ /*         state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; */  //Discard
527: /* MUTANT (rep_op) */        state->discard[currentPlayer][state->discardCount[currentPlayer]--] = state->hand[currentPlayer][i]; //Discard
528: /* MUTANT (del_stmt) */ /*         state->hand[currentPlayer][i] = -1; */  //Set card to -1
528: /* MUTANT (rep_const) */        state->hand[currentPlayer][i] = 0; //Set card to -1
528: /* MUTANT (rep_const) */        state->hand[currentPlayer][i] = 1; //Set card to -1
528: /* MUTANT (rep_const) */        state->hand[currentPlayer][i] = ((-1)+1); //Set card to -1
528: /* MUTANT (rep_const) */        state->hand[currentPlayer][i] = ((-1)-1); //Set card to -1
530: /* MUTANT (rep_const) */    state->handCount[currentPlayer] = 1; //Reset hand count
530: /* MUTANT (rep_const) */    state->handCount[currentPlayer] = -1; //Reset hand count
533: /* MUTANT (rep_op) */    if (currentPlayer <= (state->numPlayers - 1)) {
533: /* MUTANT (rep_op) */    if (currentPlayer > (state->numPlayers - 1)) {
533: /* MUTANT (rep_op) */    if (currentPlayer >= (state->numPlayers - 1)) {
533: /* MUTANT (rep_op) */    if (currentPlayer == (state->numPlayers - 1)) {
533: /* MUTANT (rep_op) */    if (currentPlayer != (state->numPlayers - 1)) {
533: /* MUTANT (rep_const) */    if (currentPlayer < (state->numPlayers - 0)) {
533: /* MUTANT (rep_const) */    if (currentPlayer < (state->numPlayers - -1)) {
533: /* MUTANT (rep_const) */    if (currentPlayer < (state->numPlayers - ((1)+1))) {
533: /* MUTANT (negate) */    if(! (currentPlayer < (state->numPlayers - 1))) {
534: /* MUTANT (del_stmt) */ /*         state->whoseTurn = currentPlayer + 1; */  //Still safe to increment
534: /* MUTANT (rep_op) */        state->whoseTurn = currentPlayer - 1; //Still safe to increment
534: /* MUTANT (rep_op) */        state->whoseTurn = currentPlayer * 1; //Still safe to increment
534: /* MUTANT (rep_op) */        state->whoseTurn = currentPlayer % 1; //Still safe to increment
534: /* MUTANT (rep_const) */        state->whoseTurn = currentPlayer + 0; //Still safe to increment
534: /* MUTANT (rep_const) */        state->whoseTurn = currentPlayer + -1; //Still safe to increment
534: /* MUTANT (rep_const) */        state->whoseTurn = currentPlayer + ((1)+1); //Still safe to increment
537: /* MUTANT (del_stmt) */ /*         state->whoseTurn = 0; */  //Max player has been reached, loop back around to player 1
537: /* MUTANT (rep_const) */        state->whoseTurn = 1; //Max player has been reached, loop back around to player 1
537: /* MUTANT (rep_const) */        state->whoseTurn = -1; //Max player has been reached, loop back around to player 1
540: /* MUTANT (rep_const) */    state->outpostPlayed = 1;
540: /* MUTANT (rep_const) */    state->outpostPlayed = -1;
541: /* MUTANT (del_stmt) */ /*     state->phase = 0; */ 
541: /* MUTANT (rep_const) */    state->phase = 1;
541: /* MUTANT (rep_const) */    state->phase = -1;
542: /* MUTANT (del_stmt) */ /*     state->numActions = 1; */ 
542: /* MUTANT (rep_const) */    state->numActions = 0;
542: /* MUTANT (rep_const) */    state->numActions = -1;
542: /* MUTANT (rep_const) */    state->numActions = ((1)+1);
543: /* MUTANT (del_stmt) */ /*     state->coins = 0; */ 
543: /* MUTANT (rep_const) */    state->coins = 1;
543: /* MUTANT (rep_const) */    state->coins = -1;
544: /* MUTANT (del_stmt) */ /*     state->numBuys = 1; */ 
544: /* MUTANT (rep_const) */    state->numBuys = 0;
544: /* MUTANT (rep_const) */    state->numBuys = -1;
544: /* MUTANT (rep_const) */    state->numBuys = ((1)+1);
545: /* MUTANT (del_stmt) */ /*     state->playedCardCount = 0; */ 
545: /* MUTANT (rep_const) */    state->playedCardCount = 1;
545: /* MUTANT (rep_const) */    state->playedCardCount = -1;
546: /* MUTANT (del_stmt) */ /*     state->handCount[state->whoseTurn] = 0; */ 
546: /* MUTANT (rep_const) */    state->handCount[state->whoseTurn] = 1;
546: /* MUTANT (rep_const) */    state->handCount[state->whoseTurn] = -1;
550: /* MUTANT (rep_op) */    for (k = 0; k <= 5; k++) {
550: /* MUTANT (rep_op) */    for (k = 0; k > 5; k++) {
550: /* MUTANT (rep_op) */    for (k = 0; k >= 5; k++) {
550: /* MUTANT (rep_op) */    for (k = 0; k == 5; k++) {
550: /* MUTANT (rep_op) */    for (k = 0; k != 5; k++) {
550: /* MUTANT (rep_op) */    for (k = 0; k < 5; k--) {
550: /* MUTANT (rep_const) */    for (k = 1; k < 5; k++) {
550: /* MUTANT (rep_const) */    for (k = -1; k < 5; k++) {
550: /* MUTANT (rep_const) */    for (k = 0; k < 0; k++) {
550: /* MUTANT (rep_const) */    for (k = 0; k < 1; k++) {
550: /* MUTANT (rep_const) */    for (k = 0; k < -1; k++) {
550: /* MUTANT (rep_const) */    for (k = 0; k < ((5)+1); k++) {
550: /* MUTANT (rep_const) */    for (k = 0; k < ((5)-1); k++) {
551: /* MUTANT (del_stmt) */ /*         drawCard(state->whoseTurn, state); */  //Draw a card
555: /* MUTANT (rep_const) */    updateCoins(state->whoseTurn, state, 1);
555: /* MUTANT (rep_const) */    updateCoins(state->whoseTurn, state, -1);
557: /* MUTANT (del_stmt) */ /*     return 0; */ 
557: /* MUTANT (rep_const) */    return 1;
557: /* MUTANT (rep_const) */    return -1;
561: /* MUTANT (del_stmt) */ /*     int i; */ 
562: /* MUTANT (del_stmt) */ /*     int j; */ 
565: /* MUTANT (rep_op) */    if (state->supplyCount[province] != 0)
565: /* MUTANT (rep_const) */    if (state->supplyCount[province] == 1)
565: /* MUTANT (rep_const) */    if (state->supplyCount[province] == -1)
565: /* MUTANT (negate) */    if(! (state->supplyCount[province] == 0))
567: /* MUTANT (del_stmt) */ /*         return 1; */ 
567: /* MUTANT (rep_const) */        return 0;
567: /* MUTANT (rep_const) */        return -1;
567: /* MUTANT (rep_const) */        return ((1)+1);
571: /* MUTANT (rep_const) */    j = 1;
571: /* MUTANT (rep_const) */    j = -1;
572: /* MUTANT (rep_op) */    for (i = 0; i <= 25; i++)
572: /* MUTANT (rep_op) */    for (i = 0; i > 25; i++)
572: /* MUTANT (rep_op) */    for (i = 0; i >= 25; i++)
572: /* MUTANT (rep_op) */    for (i = 0; i == 25; i++)
572: /* MUTANT (rep_op) */    for (i = 0; i != 25; i++)
572: /* MUTANT (rep_op) */    for (i = 0; i < 25; i--)
572: /* MUTANT (rep_const) */    for (i = 1; i < 25; i++)
572: /* MUTANT (rep_const) */    for (i = -1; i < 25; i++)
572: /* MUTANT (rep_const) */    for (i = 0; i < 0; i++)
572: /* MUTANT (rep_const) */    for (i = 0; i < 1; i++)
572: /* MUTANT (rep_const) */    for (i = 0; i < -1; i++)
572: /* MUTANT (rep_const) */    for (i = 0; i < ((25)+1); i++)
572: /* MUTANT (rep_const) */    for (i = 0; i < ((25)-1); i++)
574: /* MUTANT (rep_op) */        if (state->supplyCount[i] != 0)
574: /* MUTANT (rep_const) */        if (state->supplyCount[i] == 1)
574: /* MUTANT (rep_const) */        if (state->supplyCount[i] == -1)
574: /* MUTANT (negate) */        if(! (state->supplyCount[i] == 0))
576: /* MUTANT (del_stmt) */ /*             j++; */ 
576: /* MUTANT (rep_op) */            j--;
579: /* MUTANT (rep_op) */    if ( j <= 3)
579: /* MUTANT (rep_op) */    if ( j < 3)
579: /* MUTANT (rep_op) */    if ( j > 3)
579: /* MUTANT (rep_op) */    if ( j == 3)
579: /* MUTANT (rep_op) */    if ( j != 3)
579: /* MUTANT (rep_const) */    if ( j >= 0)
579: /* MUTANT (rep_const) */    if ( j >= 1)
579: /* MUTANT (rep_const) */    if ( j >= -1)
579: /* MUTANT (rep_const) */    if ( j >= ((3)+1))
579: /* MUTANT (rep_const) */    if ( j >= ((3)-1))
579: /* MUTANT (negate) */    if(! ( j >= 3))
581: /* MUTANT (del_stmt) */ /*         return 1; */ 
581: /* MUTANT (rep_const) */        return 0;
581: /* MUTANT (rep_const) */        return -1;
581: /* MUTANT (rep_const) */        return ((1)+1);
584: /* MUTANT (rep_const) */    return 1;
584: /* MUTANT (rep_const) */    return -1;
589: /* MUTANT (del_stmt) */ /*     int i; */ 
590: /* MUTANT (del_stmt) */ /*     int score = 0; */ 
590: /* MUTANT (rep_const) */    int score = 1;
590: /* MUTANT (rep_const) */    int score = -1;
592: /* MUTANT (rep_op) */    for (i = 0; i <= state->handCount[player]; i++)
592: /* MUTANT (rep_op) */    for (i = 0; i > state->handCount[player]; i++)
592: /* MUTANT (rep_op) */    for (i = 0; i >= state->handCount[player]; i++)
592: /* MUTANT (rep_op) */    for (i = 0; i == state->handCount[player]; i++)
592: /* MUTANT (rep_op) */    for (i = 0; i != state->handCount[player]; i++)
592: /* MUTANT (rep_op) */    for (i = 0; i < state->handCount[player]; i--)
592: /* MUTANT (rep_const) */    for (i = 1; i < state->handCount[player]; i++)
592: /* MUTANT (rep_const) */    for (i = -1; i < state->handCount[player]; i++)
594: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == curse) { score = score - 1; */  };
594: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == curse) { score = score - 1; */  /*  }; */ 
594: /* MUTANT (del_stmt) */        if (state->hand[player][i] == curse) { score = score - 1; /*  }; */ 
594: /* MUTANT (rep_op) */        if (state->hand[player][i] != curse) { score = score - 1; };
594: /* MUTANT (rep_const) */        if (state->hand[player][i] == curse) { score = score - 0; };
594: /* MUTANT (rep_const) */        if (state->hand[player][i] == curse) { score = score - -1; };
594: /* MUTANT (rep_const) */        if (state->hand[player][i] == curse) { score = score - ((1)+1); };
594: /* MUTANT (negate) */        if(! (state->hand[player][i] == curse)) { score = score - 1; };
595: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == estate) { score = score + 1; */  };
595: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == estate) { score = score + 1; */  /*  }; */ 
595: /* MUTANT (del_stmt) */        if (state->hand[player][i] == estate) { score = score + 1; /*  }; */ 
595: /* MUTANT (rep_op) */        if (state->hand[player][i] != estate) { score = score + 1; };
595: /* MUTANT (rep_op) */        if (state->hand[player][i] == estate) { score = score - 1; };
595: /* MUTANT (rep_op) */        if (state->hand[player][i] == estate) { score = score * 1; };
595: /* MUTANT (rep_op) */        if (state->hand[player][i] == estate) { score = score % 1; };
595: /* MUTANT (rep_const) */        if (state->hand[player][i] == estate) { score = score + 0; };
595: /* MUTANT (rep_const) */        if (state->hand[player][i] == estate) { score = score + -1; };
595: /* MUTANT (rep_const) */        if (state->hand[player][i] == estate) { score = score + ((1)+1); };
595: /* MUTANT (negate) */        if(! (state->hand[player][i] == estate)) { score = score + 1; };
596: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == duchy) { score = score + 3; */  };
596: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == duchy) { score = score + 3; */  /*  }; */ 
596: /* MUTANT (del_stmt) */        if (state->hand[player][i] == duchy) { score = score + 3; /*  }; */ 
596: /* MUTANT (rep_op) */        if (state->hand[player][i] != duchy) { score = score + 3; };
596: /* MUTANT (rep_op) */        if (state->hand[player][i] == duchy) { score = score - 3; };
596: /* MUTANT (rep_op) */        if (state->hand[player][i] == duchy) { score = score * 3; };
596: /* MUTANT (rep_op) */        if (state->hand[player][i] == duchy) { score = score % 3; };
596: /* MUTANT (rep_const) */        if (state->hand[player][i] == duchy) { score = score + 0; };
596: /* MUTANT (rep_const) */        if (state->hand[player][i] == duchy) { score = score + 1; };
596: /* MUTANT (rep_const) */        if (state->hand[player][i] == duchy) { score = score + -1; };
596: /* MUTANT (rep_const) */        if (state->hand[player][i] == duchy) { score = score + ((3)+1); };
596: /* MUTANT (rep_const) */        if (state->hand[player][i] == duchy) { score = score + ((3)-1); };
596: /* MUTANT (negate) */        if(! (state->hand[player][i] == duchy)) { score = score + 3; };
597: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == province) { score = score + 6; */  };
597: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == province) { score = score + 6; */  /*  }; */ 
597: /* MUTANT (del_stmt) */        if (state->hand[player][i] == province) { score = score + 6; /*  }; */ 
597: /* MUTANT (rep_op) */        if (state->hand[player][i] != province) { score = score + 6; };
597: /* MUTANT (rep_op) */        if (state->hand[player][i] == province) { score = score - 6; };
597: /* MUTANT (rep_op) */        if (state->hand[player][i] == province) { score = score * 6; };
597: /* MUTANT (rep_op) */        if (state->hand[player][i] == province) { score = score % 6; };
597: /* MUTANT (rep_const) */        if (state->hand[player][i] == province) { score = score + 0; };
597: /* MUTANT (rep_const) */        if (state->hand[player][i] == province) { score = score + 1; };
597: /* MUTANT (rep_const) */        if (state->hand[player][i] == province) { score = score + -1; };
597: /* MUTANT (rep_const) */        if (state->hand[player][i] == province) { score = score + ((6)+1); };
597: /* MUTANT (rep_const) */        if (state->hand[player][i] == province) { score = score + ((6)-1); };
597: /* MUTANT (negate) */        if(! (state->hand[player][i] == province)) { score = score + 6; };
598: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == great_hall) { score = score + 1; */  };
598: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
598: /* MUTANT (del_stmt) */        if (state->hand[player][i] == great_hall) { score = score + 1; /*  }; */ 
598: /* MUTANT (rep_op) */        if (state->hand[player][i] != great_hall) { score = score + 1; };
598: /* MUTANT (rep_op) */        if (state->hand[player][i] == great_hall) { score = score - 1; };
598: /* MUTANT (rep_op) */        if (state->hand[player][i] == great_hall) { score = score * 1; };
598: /* MUTANT (rep_op) */        if (state->hand[player][i] == great_hall) { score = score % 1; };
598: /* MUTANT (rep_const) */        if (state->hand[player][i] == great_hall) { score = score + 0; };
598: /* MUTANT (rep_const) */        if (state->hand[player][i] == great_hall) { score = score + -1; };
598: /* MUTANT (rep_const) */        if (state->hand[player][i] == great_hall) { score = score + ((1)+1); };
598: /* MUTANT (negate) */        if(! (state->hand[player][i] == great_hall)) { score = score + 1; };
599: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  };
599: /* MUTANT (del_stmt) */ /*         if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  /*  }; */ 
599: /* MUTANT (del_stmt) */        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); /*  }; */ 
599: /* MUTANT (rep_op) */        if (state->hand[player][i] != gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
599: /* MUTANT (rep_op) */        if (state->hand[player][i] == gardens) { score = score - ( fullDeckCount(player, 0, state) / 10 ); };
599: /* MUTANT (rep_op) */        if (state->hand[player][i] == gardens) { score = score * ( fullDeckCount(player, 0, state) / 10 ); };
599: /* MUTANT (rep_op) */        if (state->hand[player][i] == gardens) { score = score % ( fullDeckCount(player, 0, state) / 10 ); };
599: /* MUTANT (rep_const) */        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 1, state) / 10 ); };
599: /* MUTANT (rep_const) */        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, -1, state) / 10 ); };
599: /* MUTANT (rep_const) */        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 0 ); };
599: /* MUTANT (rep_const) */        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 1 ); };
599: /* MUTANT (rep_const) */        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / -1 ); };
599: /* MUTANT (rep_const) */        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)+1) ); };
599: /* MUTANT (rep_const) */        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)-1) ); };
599: /* MUTANT (negate) */        if(! (state->hand[player][i] == gardens)) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
603: /* MUTANT (rep_op) */    for (i = 0; i <= state->discardCount[player]; i++)
603: /* MUTANT (rep_op) */    for (i = 0; i > state->discardCount[player]; i++)
603: /* MUTANT (rep_op) */    for (i = 0; i >= state->discardCount[player]; i++)
603: /* MUTANT (rep_op) */    for (i = 0; i == state->discardCount[player]; i++)
603: /* MUTANT (rep_op) */    for (i = 0; i != state->discardCount[player]; i++)
603: /* MUTANT (rep_op) */    for (i = 0; i < state->discardCount[player]; i--)
603: /* MUTANT (rep_const) */    for (i = 1; i < state->discardCount[player]; i++)
603: /* MUTANT (rep_const) */    for (i = -1; i < state->discardCount[player]; i++)
605: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == curse) { score = score - 1; */  };
605: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == curse) { score = score - 1; */  /*  }; */ 
605: /* MUTANT (del_stmt) */        if (state->discard[player][i] == curse) { score = score - 1; /*  }; */ 
605: /* MUTANT (rep_op) */        if (state->discard[player][i] != curse) { score = score - 1; };
605: /* MUTANT (rep_const) */        if (state->discard[player][i] == curse) { score = score - 0; };
605: /* MUTANT (rep_const) */        if (state->discard[player][i] == curse) { score = score - -1; };
605: /* MUTANT (rep_const) */        if (state->discard[player][i] == curse) { score = score - ((1)+1); };
605: /* MUTANT (negate) */        if(! (state->discard[player][i] == curse)) { score = score - 1; };
606: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == estate) { score = score + 1; */  };
606: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == estate) { score = score + 1; */  /*  }; */ 
606: /* MUTANT (del_stmt) */        if (state->discard[player][i] == estate) { score = score + 1; /*  }; */ 
606: /* MUTANT (rep_op) */        if (state->discard[player][i] != estate) { score = score + 1; };
606: /* MUTANT (rep_op) */        if (state->discard[player][i] == estate) { score = score - 1; };
606: /* MUTANT (rep_op) */        if (state->discard[player][i] == estate) { score = score * 1; };
606: /* MUTANT (rep_op) */        if (state->discard[player][i] == estate) { score = score % 1; };
606: /* MUTANT (rep_const) */        if (state->discard[player][i] == estate) { score = score + 0; };
606: /* MUTANT (rep_const) */        if (state->discard[player][i] == estate) { score = score + -1; };
606: /* MUTANT (rep_const) */        if (state->discard[player][i] == estate) { score = score + ((1)+1); };
606: /* MUTANT (negate) */        if(! (state->discard[player][i] == estate)) { score = score + 1; };
607: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == duchy) { score = score + 3; */  };
607: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == duchy) { score = score + 3; */  /*  }; */ 
607: /* MUTANT (del_stmt) */        if (state->discard[player][i] == duchy) { score = score + 3; /*  }; */ 
607: /* MUTANT (rep_op) */        if (state->discard[player][i] != duchy) { score = score + 3; };
607: /* MUTANT (rep_op) */        if (state->discard[player][i] == duchy) { score = score - 3; };
607: /* MUTANT (rep_op) */        if (state->discard[player][i] == duchy) { score = score * 3; };
607: /* MUTANT (rep_op) */        if (state->discard[player][i] == duchy) { score = score % 3; };
607: /* MUTANT (rep_const) */        if (state->discard[player][i] == duchy) { score = score + 0; };
607: /* MUTANT (rep_const) */        if (state->discard[player][i] == duchy) { score = score + 1; };
607: /* MUTANT (rep_const) */        if (state->discard[player][i] == duchy) { score = score + -1; };
607: /* MUTANT (rep_const) */        if (state->discard[player][i] == duchy) { score = score + ((3)+1); };
607: /* MUTANT (rep_const) */        if (state->discard[player][i] == duchy) { score = score + ((3)-1); };
607: /* MUTANT (negate) */        if(! (state->discard[player][i] == duchy)) { score = score + 3; };
608: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == province) { score = score + 6; */  };
608: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == province) { score = score + 6; */  /*  }; */ 
608: /* MUTANT (del_stmt) */        if (state->discard[player][i] == province) { score = score + 6; /*  }; */ 
608: /* MUTANT (rep_op) */        if (state->discard[player][i] != province) { score = score + 6; };
608: /* MUTANT (rep_op) */        if (state->discard[player][i] == province) { score = score - 6; };
608: /* MUTANT (rep_op) */        if (state->discard[player][i] == province) { score = score * 6; };
608: /* MUTANT (rep_op) */        if (state->discard[player][i] == province) { score = score % 6; };
608: /* MUTANT (rep_const) */        if (state->discard[player][i] == province) { score = score + 0; };
608: /* MUTANT (rep_const) */        if (state->discard[player][i] == province) { score = score + 1; };
608: /* MUTANT (rep_const) */        if (state->discard[player][i] == province) { score = score + -1; };
608: /* MUTANT (rep_const) */        if (state->discard[player][i] == province) { score = score + ((6)+1); };
608: /* MUTANT (rep_const) */        if (state->discard[player][i] == province) { score = score + ((6)-1); };
608: /* MUTANT (negate) */        if(! (state->discard[player][i] == province)) { score = score + 6; };
609: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == great_hall) { score = score + 1; */  };
609: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
609: /* MUTANT (del_stmt) */        if (state->discard[player][i] == great_hall) { score = score + 1; /*  }; */ 
609: /* MUTANT (rep_op) */        if (state->discard[player][i] != great_hall) { score = score + 1; };
609: /* MUTANT (rep_op) */        if (state->discard[player][i] == great_hall) { score = score - 1; };
609: /* MUTANT (rep_op) */        if (state->discard[player][i] == great_hall) { score = score * 1; };
609: /* MUTANT (rep_op) */        if (state->discard[player][i] == great_hall) { score = score % 1; };
609: /* MUTANT (rep_const) */        if (state->discard[player][i] == great_hall) { score = score + 0; };
609: /* MUTANT (rep_const) */        if (state->discard[player][i] == great_hall) { score = score + -1; };
609: /* MUTANT (rep_const) */        if (state->discard[player][i] == great_hall) { score = score + ((1)+1); };
609: /* MUTANT (negate) */        if(! (state->discard[player][i] == great_hall)) { score = score + 1; };
610: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  };
610: /* MUTANT (del_stmt) */ /*         if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  /*  }; */ 
610: /* MUTANT (del_stmt) */        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); /*  }; */ 
610: /* MUTANT (rep_op) */        if (state->discard[player][i] != gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
610: /* MUTANT (rep_op) */        if (state->discard[player][i] == gardens) { score = score - ( fullDeckCount(player, 0, state) / 10 ); };
610: /* MUTANT (rep_op) */        if (state->discard[player][i] == gardens) { score = score * ( fullDeckCount(player, 0, state) / 10 ); };
610: /* MUTANT (rep_op) */        if (state->discard[player][i] == gardens) { score = score % ( fullDeckCount(player, 0, state) / 10 ); };
610: /* MUTANT (rep_const) */        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 1, state) / 10 ); };
610: /* MUTANT (rep_const) */        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, -1, state) / 10 ); };
610: /* MUTANT (rep_const) */        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 0 ); };
610: /* MUTANT (rep_const) */        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 1 ); };
610: /* MUTANT (rep_const) */        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / -1 ); };
610: /* MUTANT (rep_const) */        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)+1) ); };
610: /* MUTANT (rep_const) */        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)-1) ); };
610: /* MUTANT (negate) */        if(! (state->discard[player][i] == gardens)) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
614: /* MUTANT (rep_op) */    for (i = 0; i <= state->discardCount[player]; i++)
614: /* MUTANT (rep_op) */    for (i = 0; i > state->discardCount[player]; i++)
614: /* MUTANT (rep_op) */    for (i = 0; i >= state->discardCount[player]; i++)
614: /* MUTANT (rep_op) */    for (i = 0; i == state->discardCount[player]; i++)
614: /* MUTANT (rep_op) */    for (i = 0; i != state->discardCount[player]; i++)
614: /* MUTANT (rep_op) */    for (i = 0; i < state->discardCount[player]; i--)
614: /* MUTANT (rep_const) */    for (i = 1; i < state->discardCount[player]; i++)
614: /* MUTANT (rep_const) */    for (i = -1; i < state->discardCount[player]; i++)
616: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == curse) { score = score - 1; */  };
616: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == curse) { score = score - 1; */  /*  }; */ 
616: /* MUTANT (del_stmt) */        if (state->deck[player][i] == curse) { score = score - 1; /*  }; */ 
616: /* MUTANT (rep_op) */        if (state->deck[player][i] != curse) { score = score - 1; };
616: /* MUTANT (rep_const) */        if (state->deck[player][i] == curse) { score = score - 0; };
616: /* MUTANT (rep_const) */        if (state->deck[player][i] == curse) { score = score - -1; };
616: /* MUTANT (rep_const) */        if (state->deck[player][i] == curse) { score = score - ((1)+1); };
616: /* MUTANT (negate) */        if(! (state->deck[player][i] == curse)) { score = score - 1; };
617: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == estate) { score = score + 1; */  };
617: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == estate) { score = score + 1; */  /*  }; */ 
617: /* MUTANT (del_stmt) */        if (state->deck[player][i] == estate) { score = score + 1; /*  }; */ 
617: /* MUTANT (rep_op) */        if (state->deck[player][i] != estate) { score = score + 1; };
617: /* MUTANT (rep_op) */        if (state->deck[player][i] == estate) { score = score - 1; };
617: /* MUTANT (rep_op) */        if (state->deck[player][i] == estate) { score = score * 1; };
617: /* MUTANT (rep_op) */        if (state->deck[player][i] == estate) { score = score % 1; };
617: /* MUTANT (rep_const) */        if (state->deck[player][i] == estate) { score = score + 0; };
617: /* MUTANT (rep_const) */        if (state->deck[player][i] == estate) { score = score + -1; };
617: /* MUTANT (rep_const) */        if (state->deck[player][i] == estate) { score = score + ((1)+1); };
617: /* MUTANT (negate) */        if(! (state->deck[player][i] == estate)) { score = score + 1; };
618: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == duchy) { score = score + 3; */  };
618: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == duchy) { score = score + 3; */  /*  }; */ 
618: /* MUTANT (del_stmt) */        if (state->deck[player][i] == duchy) { score = score + 3; /*  }; */ 
618: /* MUTANT (rep_op) */        if (state->deck[player][i] != duchy) { score = score + 3; };
618: /* MUTANT (rep_op) */        if (state->deck[player][i] == duchy) { score = score - 3; };
618: /* MUTANT (rep_op) */        if (state->deck[player][i] == duchy) { score = score * 3; };
618: /* MUTANT (rep_op) */        if (state->deck[player][i] == duchy) { score = score % 3; };
618: /* MUTANT (rep_const) */        if (state->deck[player][i] == duchy) { score = score + 0; };
618: /* MUTANT (rep_const) */        if (state->deck[player][i] == duchy) { score = score + 1; };
618: /* MUTANT (rep_const) */        if (state->deck[player][i] == duchy) { score = score + -1; };
618: /* MUTANT (rep_const) */        if (state->deck[player][i] == duchy) { score = score + ((3)+1); };
618: /* MUTANT (rep_const) */        if (state->deck[player][i] == duchy) { score = score + ((3)-1); };
618: /* MUTANT (negate) */        if(! (state->deck[player][i] == duchy)) { score = score + 3; };
619: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == province) { score = score + 6; */  };
619: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == province) { score = score + 6; */  /*  }; */ 
619: /* MUTANT (del_stmt) */        if (state->deck[player][i] == province) { score = score + 6; /*  }; */ 
619: /* MUTANT (rep_op) */        if (state->deck[player][i] != province) { score = score + 6; };
619: /* MUTANT (rep_op) */        if (state->deck[player][i] == province) { score = score - 6; };
619: /* MUTANT (rep_op) */        if (state->deck[player][i] == province) { score = score * 6; };
619: /* MUTANT (rep_op) */        if (state->deck[player][i] == province) { score = score % 6; };
619: /* MUTANT (rep_const) */        if (state->deck[player][i] == province) { score = score + 0; };
619: /* MUTANT (rep_const) */        if (state->deck[player][i] == province) { score = score + 1; };
619: /* MUTANT (rep_const) */        if (state->deck[player][i] == province) { score = score + -1; };
619: /* MUTANT (rep_const) */        if (state->deck[player][i] == province) { score = score + ((6)+1); };
619: /* MUTANT (rep_const) */        if (state->deck[player][i] == province) { score = score + ((6)-1); };
619: /* MUTANT (negate) */        if(! (state->deck[player][i] == province)) { score = score + 6; };
620: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == great_hall) { score = score + 1; */  };
620: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
620: /* MUTANT (del_stmt) */        if (state->deck[player][i] == great_hall) { score = score + 1; /*  }; */ 
620: /* MUTANT (rep_op) */        if (state->deck[player][i] != great_hall) { score = score + 1; };
620: /* MUTANT (rep_op) */        if (state->deck[player][i] == great_hall) { score = score - 1; };
620: /* MUTANT (rep_op) */        if (state->deck[player][i] == great_hall) { score = score * 1; };
620: /* MUTANT (rep_op) */        if (state->deck[player][i] == great_hall) { score = score % 1; };
620: /* MUTANT (rep_const) */        if (state->deck[player][i] == great_hall) { score = score + 0; };
620: /* MUTANT (rep_const) */        if (state->deck[player][i] == great_hall) { score = score + -1; };
620: /* MUTANT (rep_const) */        if (state->deck[player][i] == great_hall) { score = score + ((1)+1); };
620: /* MUTANT (negate) */        if(! (state->deck[player][i] == great_hall)) { score = score + 1; };
621: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  };
621: /* MUTANT (del_stmt) */ /*         if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  /*  }; */ 
621: /* MUTANT (del_stmt) */        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); /*  }; */ 
621: /* MUTANT (rep_op) */        if (state->deck[player][i] != gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
621: /* MUTANT (rep_op) */        if (state->deck[player][i] == gardens) { score = score - ( fullDeckCount(player, 0, state) / 10 ); };
621: /* MUTANT (rep_op) */        if (state->deck[player][i] == gardens) { score = score * ( fullDeckCount(player, 0, state) / 10 ); };
621: /* MUTANT (rep_op) */        if (state->deck[player][i] == gardens) { score = score % ( fullDeckCount(player, 0, state) / 10 ); };
621: /* MUTANT (rep_const) */        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 1, state) / 10 ); };
621: /* MUTANT (rep_const) */        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, -1, state) / 10 ); };
621: /* MUTANT (rep_const) */        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 0 ); };
621: /* MUTANT (rep_const) */        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 1 ); };
621: /* MUTANT (rep_const) */        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / -1 ); };
621: /* MUTANT (rep_const) */        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)+1) ); };
621: /* MUTANT (rep_const) */        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)-1) ); };
621: /* MUTANT (negate) */        if(! (state->deck[player][i] == gardens)) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
628: /* MUTANT (del_stmt) */ /*     int i; */ 
629: /* MUTANT (del_stmt) */ /*     int j; */ 
630: /* MUTANT (del_stmt) */ /*     int highScore; */ 
631: /* MUTANT (del_stmt) */ /*     int currentPlayer; */ 
634: /* MUTANT (rep_op) */    for (i = 0; i <= MAX_PLAYERS; i++)
634: /* MUTANT (rep_op) */    for (i = 0; i > MAX_PLAYERS; i++)
634: /* MUTANT (rep_op) */    for (i = 0; i >= MAX_PLAYERS; i++)
634: /* MUTANT (rep_op) */    for (i = 0; i == MAX_PLAYERS; i++)
634: /* MUTANT (rep_op) */    for (i = 0; i != MAX_PLAYERS; i++)
634: /* MUTANT (rep_op) */    for (i = 0; i < MAX_PLAYERS; i--)
634: /* MUTANT (rep_const) */    for (i = 1; i < MAX_PLAYERS; i++)
634: /* MUTANT (rep_const) */    for (i = -1; i < MAX_PLAYERS; i++)
637: /* MUTANT (rep_op) */        if (i <= state->numPlayers)
637: /* MUTANT (rep_op) */        if (i < state->numPlayers)
637: /* MUTANT (rep_op) */        if (i > state->numPlayers)
637: /* MUTANT (rep_op) */        if (i == state->numPlayers)
637: /* MUTANT (rep_op) */        if (i != state->numPlayers)
637: /* MUTANT (negate) */        if(! (i >= state->numPlayers))
639: /* MUTANT (del_stmt) */ /*             players[i] = -9999; */ 
639: /* MUTANT (rep_const) */            players[i] = 0;
639: /* MUTANT (rep_const) */            players[i] = 1;
639: /* MUTANT (rep_const) */            players[i] = -1;
639: /* MUTANT (rep_const) */            players[i] = ((-9999)+1);
639: /* MUTANT (rep_const) */            players[i] = ((-9999)-1);
643: /* MUTANT (del_stmt) */ /*             players[i] = scoreFor (i, state); */ 
648: /* MUTANT (rep_const) */    j = 1;
648: /* MUTANT (rep_const) */    j = -1;
649: /* MUTANT (rep_op) */    for (i = 0; i <= MAX_PLAYERS; i++)
649: /* MUTANT (rep_op) */    for (i = 0; i > MAX_PLAYERS; i++)
649: /* MUTANT (rep_op) */    for (i = 0; i >= MAX_PLAYERS; i++)
649: /* MUTANT (rep_op) */    for (i = 0; i == MAX_PLAYERS; i++)
649: /* MUTANT (rep_op) */    for (i = 0; i != MAX_PLAYERS; i++)
649: /* MUTANT (rep_op) */    for (i = 0; i < MAX_PLAYERS; i--)
649: /* MUTANT (rep_const) */    for (i = 1; i < MAX_PLAYERS; i++)
649: /* MUTANT (rep_const) */    for (i = -1; i < MAX_PLAYERS; i++)
651: /* MUTANT (rep_op) */        if (players[i] <= players[j])
651: /* MUTANT (rep_op) */        if (players[i] < players[j])
651: /* MUTANT (rep_op) */        if (players[i] >= players[j])
651: /* MUTANT (rep_op) */        if (players[i] == players[j])
651: /* MUTANT (rep_op) */        if (players[i] != players[j])
651: /* MUTANT (negate) */        if(! (players[i] > players[j]))
653: /* MUTANT (del_stmt) */ /*             j = i; */ 
659: /* MUTANT (del_stmt) */ /*     currentPlayer = whoseTurn(state); */ 
660: /* MUTANT (rep_op) */    for (i = 0; i <= MAX_PLAYERS; i++)
660: /* MUTANT (rep_op) */    for (i = 0; i > MAX_PLAYERS; i++)
660: /* MUTANT (rep_op) */    for (i = 0; i >= MAX_PLAYERS; i++)
660: /* MUTANT (rep_op) */    for (i = 0; i == MAX_PLAYERS; i++)
660: /* MUTANT (rep_op) */    for (i = 0; i != MAX_PLAYERS; i++)
660: /* MUTANT (rep_op) */    for (i = 0; i < MAX_PLAYERS; i--)
660: /* MUTANT (rep_const) */    for (i = 1; i < MAX_PLAYERS; i++)
660: /* MUTANT (rep_const) */    for (i = -1; i < MAX_PLAYERS; i++)
662: /* MUTANT (rep_op) */        if ( players[i] != highScore && i > currentPlayer )
662: /* MUTANT (rep_op) */        if ( players[i] == highScore || i > currentPlayer )
662: /* MUTANT (rep_op) */        if ( players[i] == highScore && i <= currentPlayer )
662: /* MUTANT (rep_op) */        if ( players[i] == highScore && i < currentPlayer )
662: /* MUTANT (rep_op) */        if ( players[i] == highScore && i >= currentPlayer )
662: /* MUTANT (rep_op) */        if ( players[i] == highScore && i == currentPlayer )
662: /* MUTANT (rep_op) */        if ( players[i] == highScore && i != currentPlayer )
662: /* MUTANT (negate) */        if(! ( players[i] == highScore && i > currentPlayer ))
664: /* MUTANT (del_stmt) */ /*             players[i]++; */ 
664: /* MUTANT (rep_op) */            players[i]--;
669: /* MUTANT (rep_const) */    j = 1;
669: /* MUTANT (rep_const) */    j = -1;
670: /* MUTANT (rep_op) */    for (i = 0; i <= MAX_PLAYERS; i++)
670: /* MUTANT (rep_op) */    for (i = 0; i > MAX_PLAYERS; i++)
670: /* MUTANT (rep_op) */    for (i = 0; i >= MAX_PLAYERS; i++)
670: /* MUTANT (rep_op) */    for (i = 0; i == MAX_PLAYERS; i++)
670: /* MUTANT (rep_op) */    for (i = 0; i != MAX_PLAYERS; i++)
670: /* MUTANT (rep_op) */    for (i = 0; i < MAX_PLAYERS; i--)
670: /* MUTANT (rep_const) */    for (i = 1; i < MAX_PLAYERS; i++)
670: /* MUTANT (rep_const) */    for (i = -1; i < MAX_PLAYERS; i++)
672: /* MUTANT (rep_op) */        if ( players[i] <= players[j] )
672: /* MUTANT (rep_op) */        if ( players[i] < players[j] )
672: /* MUTANT (rep_op) */        if ( players[i] >= players[j] )
672: /* MUTANT (rep_op) */        if ( players[i] == players[j] )
672: /* MUTANT (rep_op) */        if ( players[i] != players[j] )
672: /* MUTANT (negate) */        if(! ( players[i] > players[j] ))
674: /* MUTANT (del_stmt) */ /*             j = i; */ 
680: /* MUTANT (rep_op) */    for (i = 0; i <= MAX_PLAYERS; i++)
680: /* MUTANT (rep_op) */    for (i = 0; i > MAX_PLAYERS; i++)
680: /* MUTANT (rep_op) */    for (i = 0; i >= MAX_PLAYERS; i++)
680: /* MUTANT (rep_op) */    for (i = 0; i == MAX_PLAYERS; i++)
680: /* MUTANT (rep_op) */    for (i = 0; i != MAX_PLAYERS; i++)
680: /* MUTANT (rep_op) */    for (i = 0; i < MAX_PLAYERS; i--)
680: /* MUTANT (rep_const) */    for (i = 1; i < MAX_PLAYERS; i++)
680: /* MUTANT (rep_const) */    for (i = -1; i < MAX_PLAYERS; i++)
682: /* MUTANT (rep_op) */        if ( players[i] != highScore )
682: /* MUTANT (negate) */        if(! ( players[i] == highScore ))
684: /* MUTANT (del_stmt) */ /*             players[i] = 1; */ 
684: /* MUTANT (rep_const) */            players[i] = 0;
684: /* MUTANT (rep_const) */            players[i] = -1;
684: /* MUTANT (rep_const) */            players[i] = ((1)+1);
688: /* MUTANT (del_stmt) */ /*             players[i] = 0; */ 
688: /* MUTANT (rep_const) */            players[i] = 1;
688: /* MUTANT (rep_const) */            players[i] = -1;
692: /* MUTANT (rep_const) */    return 1;
692: /* MUTANT (rep_const) */    return -1;
697: /* MUTANT (del_stmt) */ /*     int count; */ 
698: /* MUTANT (del_stmt) */ /*     int deckCounter; */ 
699: /* MUTANT (rep_op) */    if (state->deckCount[player] < 0) { //Deck is empty
699: /* MUTANT (rep_op) */    if (state->deckCount[player] > 0) { //Deck is empty
699: /* MUTANT (rep_op) */    if (state->deckCount[player] >= 0) { //Deck is empty
699: /* MUTANT (rep_op) */    if (state->deckCount[player] == 0) { //Deck is empty
699: /* MUTANT (rep_op) */    if (state->deckCount[player] != 0) { //Deck is empty
699: /* MUTANT (rep_const) */    if (state->deckCount[player] <= 1) { //Deck is empty
699: /* MUTANT (rep_const) */    if (state->deckCount[player] <= -1) { //Deck is empty
699: /* MUTANT (negate) */    if(! (state->deckCount[player] <= 0)) { //Deck is empty
702: /* MUTANT (del_stmt) */ /*         int i; */ 
704: /* MUTANT (rep_op) */        for (i = 0; i <= state->discardCount[player]; i++) {
704: /* MUTANT (rep_op) */        for (i = 0; i > state->discardCount[player]; i++) {
704: /* MUTANT (rep_op) */        for (i = 0; i >= state->discardCount[player]; i++) {
704: /* MUTANT (rep_op) */        for (i = 0; i == state->discardCount[player]; i++) {
704: /* MUTANT (rep_op) */        for (i = 0; i != state->discardCount[player]; i++) {
704: /* MUTANT (rep_op) */        for (i = 0; i < state->discardCount[player]; i--) {
704: /* MUTANT (rep_const) */        for (i = 1; i < state->discardCount[player]; i++) {
704: /* MUTANT (rep_const) */        for (i = -1; i < state->discardCount[player]; i++) {
705: /* MUTANT (del_stmt) */ /*             state->deck[player][i] = state->discard[player][i]; */ 
706: /* MUTANT (del_stmt) */ /*             state->discard[player][i] = -1; */ 
706: /* MUTANT (rep_const) */            state->discard[player][i] = 0;
706: /* MUTANT (rep_const) */            state->discard[player][i] = 1;
706: /* MUTANT (rep_const) */            state->discard[player][i] = ((-1)+1);
706: /* MUTANT (rep_const) */            state->discard[player][i] = ((-1)-1);
710: /* MUTANT (del_stmt) */ /*         state->discardCount[player] = 0; */  //Reset discard
710: /* MUTANT (rep_const) */        state->discardCount[player] = 1; //Reset discard
710: /* MUTANT (rep_const) */        state->discardCount[player] = -1; //Reset discard
713: /* MUTANT (del_stmt) */ /*         shuffle(player, state); */  //Shuffle the deck up and make it so that we can draw
715: /* MUTANT (negate) */        if(! (DEBUG)) { //Debug statements
716: /* MUTANT (del_stmt) */ /*             printf("Deck count now: %d\n", state->deckCount[player]); */ 
719: /* MUTANT (rep_const) */        state->discardCount[player] = 1;
719: /* MUTANT (rep_const) */        state->discardCount[player] = -1;
722: /* MUTANT (del_stmt) */ /*         count = state->handCount[player]; */  //Get current player's hand count
724: /* MUTANT (negate) */        if(! (DEBUG)) { //Debug statements
725: /* MUTANT (del_stmt) */ /*             printf("Current hand count: %d\n", count); */ 
730: /* MUTANT (rep_op) */        if (deckCounter != 0)
730: /* MUTANT (rep_const) */        if (deckCounter == 1)
730: /* MUTANT (rep_const) */        if (deckCounter == -1)
730: /* MUTANT (negate) */        if(! (deckCounter == 0))
731: /* MUTANT (rep_const) */            return 0;
731: /* MUTANT (rep_const) */            return 1;
731: /* MUTANT (rep_const) */            return ((-1)+1);
731: /* MUTANT (rep_const) */            return ((-1)-1);
733: /* MUTANT (del_stmt) */ /*         state->hand[player][count] = state->deck[player][deckCounter - 1]; */  //Add card to hand
733: /* MUTANT (rep_const) */        state->hand[player][count] = state->deck[player][deckCounter - 0]; //Add card to hand
733: /* MUTANT (rep_const) */        state->hand[player][count] = state->deck[player][deckCounter - -1]; //Add card to hand
733: /* MUTANT (rep_const) */        state->hand[player][count] = state->deck[player][deckCounter - ((1)+1)]; //Add card to hand
734: /* MUTANT (del_stmt) */ /*         state->deckCount[player]--; */ 
734: /* MUTANT (rep_op) */        state->deckCount[player]++;
735: /* MUTANT (del_stmt) */ /*         state->handCount[player]++; */  //Increment hand count
735: /* MUTANT (rep_op) */        state->handCount[player]--; //Increment hand count
739: /* MUTANT (del_stmt) */ /*         int count = state->handCount[player]; */  //Get current hand count for player
740: /* MUTANT (del_stmt) */ /*         int deckCounter; */ 
741: /* MUTANT (negate) */        if(! (DEBUG)) { //Debug statements
742: /* MUTANT (del_stmt) */ /*             printf("Current hand count: %d\n", count); */ 
746: /* MUTANT (del_stmt) */ /*         state->hand[player][count] = state->deck[player][deckCounter - 1]; */  //Add card to the hand
746: /* MUTANT (rep_const) */        state->hand[player][count] = state->deck[player][deckCounter - 0]; //Add card to the hand
746: /* MUTANT (rep_const) */        state->hand[player][count] = state->deck[player][deckCounter - -1]; //Add card to the hand
746: /* MUTANT (rep_const) */        state->hand[player][count] = state->deck[player][deckCounter - ((1)+1)]; //Add card to the hand
747: /* MUTANT (del_stmt) */ /*         state->deckCount[player]--; */ 
747: /* MUTANT (rep_op) */        state->deckCount[player]++;
748: /* MUTANT (del_stmt) */ /*         state->handCount[player]++; */  //Increment hand count
748: /* MUTANT (rep_op) */        state->handCount[player]--; //Increment hand count
751: /* MUTANT (rep_const) */    return 1;
751: /* MUTANT (rep_const) */    return -1;
759: /* MUTANT (rep_const) */        return 1;
759: /* MUTANT (rep_const) */        return -1;
761: /* MUTANT (rep_const) */        return 0;
761: /* MUTANT (rep_const) */        return 1;
761: /* MUTANT (rep_const) */        return -1;
761: /* MUTANT (rep_const) */        return ((2)+1);
761: /* MUTANT (rep_const) */        return ((2)-1);
763: /* MUTANT (rep_const) */        return 0;
763: /* MUTANT (rep_const) */        return 1;
763: /* MUTANT (rep_const) */        return -1;
763: /* MUTANT (rep_const) */        return ((5)+1);
763: /* MUTANT (rep_const) */        return ((5)-1);
765: /* MUTANT (rep_const) */        return 0;
765: /* MUTANT (rep_const) */        return 1;
765: /* MUTANT (rep_const) */        return -1;
765: /* MUTANT (rep_const) */        return ((8)+1);
765: /* MUTANT (rep_const) */        return ((8)-1);
767: /* MUTANT (rep_const) */        return 1;
767: /* MUTANT (rep_const) */        return -1;
769: /* MUTANT (rep_const) */        return 0;
769: /* MUTANT (rep_const) */        return 1;
769: /* MUTANT (rep_const) */        return -1;
769: /* MUTANT (rep_const) */        return ((3)+1);
769: /* MUTANT (rep_const) */        return ((3)-1);
771: /* MUTANT (rep_const) */        return 0;
771: /* MUTANT (rep_const) */        return 1;
771: /* MUTANT (rep_const) */        return -1;
771: /* MUTANT (rep_const) */        return ((6)+1);
771: /* MUTANT (rep_const) */        return ((6)-1);
773: /* MUTANT (rep_const) */        return 0;
773: /* MUTANT (rep_const) */        return 1;
773: /* MUTANT (rep_const) */        return -1;
773: /* MUTANT (rep_const) */        return ((6)+1);
773: /* MUTANT (rep_const) */        return ((6)-1);
775: /* MUTANT (rep_const) */        return 0;
775: /* MUTANT (rep_const) */        return 1;
775: /* MUTANT (rep_const) */        return -1;
775: /* MUTANT (rep_const) */        return ((5)+1);
775: /* MUTANT (rep_const) */        return ((5)-1);
777: /* MUTANT (rep_const) */        return 0;
777: /* MUTANT (rep_const) */        return 1;
777: /* MUTANT (rep_const) */        return -1;
777: /* MUTANT (rep_const) */        return ((4)+1);
777: /* MUTANT (rep_const) */        return ((4)-1);
779: /* MUTANT (rep_const) */        return 0;
779: /* MUTANT (rep_const) */        return 1;
779: /* MUTANT (rep_const) */        return -1;
779: /* MUTANT (rep_const) */        return ((4)+1);
779: /* MUTANT (rep_const) */        return ((4)-1);
781: /* MUTANT (rep_const) */        return 0;
781: /* MUTANT (rep_const) */        return 1;
781: /* MUTANT (rep_const) */        return -1;
781: /* MUTANT (rep_const) */        return ((5)+1);
781: /* MUTANT (rep_const) */        return ((5)-1);
783: /* MUTANT (rep_const) */        return 0;
783: /* MUTANT (rep_const) */        return 1;
783: /* MUTANT (rep_const) */        return -1;
783: /* MUTANT (rep_const) */        return ((4)+1);
783: /* MUTANT (rep_const) */        return ((4)-1);
785: /* MUTANT (rep_const) */        return 0;
785: /* MUTANT (rep_const) */        return 1;
785: /* MUTANT (rep_const) */        return -1;
785: /* MUTANT (rep_const) */        return ((4)+1);
785: /* MUTANT (rep_const) */        return ((4)-1);
787: /* MUTANT (rep_const) */        return 0;
787: /* MUTANT (rep_const) */        return 1;
787: /* MUTANT (rep_const) */        return -1;
787: /* MUTANT (rep_const) */        return ((3)+1);
787: /* MUTANT (rep_const) */        return ((3)-1);
789: /* MUTANT (rep_const) */        return 0;
789: /* MUTANT (rep_const) */        return 1;
789: /* MUTANT (rep_const) */        return -1;
789: /* MUTANT (rep_const) */        return ((4)+1);
789: /* MUTANT (rep_const) */        return ((4)-1);
791: /* MUTANT (rep_const) */        return 0;
791: /* MUTANT (rep_const) */        return 1;
791: /* MUTANT (rep_const) */        return -1;
791: /* MUTANT (rep_const) */        return ((3)+1);
791: /* MUTANT (rep_const) */        return ((3)-1);
793: /* MUTANT (rep_const) */        return 0;
793: /* MUTANT (rep_const) */        return 1;
793: /* MUTANT (rep_const) */        return -1;
793: /* MUTANT (rep_const) */        return ((5)+1);
793: /* MUTANT (rep_const) */        return ((5)-1);
795: /* MUTANT (rep_const) */        return 0;
795: /* MUTANT (rep_const) */        return 1;
795: /* MUTANT (rep_const) */        return -1;
795: /* MUTANT (rep_const) */        return ((3)+1);
795: /* MUTANT (rep_const) */        return ((3)-1);
797: /* MUTANT (rep_const) */        return 0;
797: /* MUTANT (rep_const) */        return 1;
797: /* MUTANT (rep_const) */        return -1;
797: /* MUTANT (rep_const) */        return ((5)+1);
797: /* MUTANT (rep_const) */        return ((5)-1);
799: /* MUTANT (rep_const) */        return 0;
799: /* MUTANT (rep_const) */        return 1;
799: /* MUTANT (rep_const) */        return -1;
799: /* MUTANT (rep_const) */        return ((3)+1);
799: /* MUTANT (rep_const) */        return ((3)-1);
801: /* MUTANT (rep_const) */        return 0;
801: /* MUTANT (rep_const) */        return 1;
801: /* MUTANT (rep_const) */        return -1;
801: /* MUTANT (rep_const) */        return ((4)+1);
801: /* MUTANT (rep_const) */        return ((4)-1);
803: /* MUTANT (rep_const) */        return 0;
803: /* MUTANT (rep_const) */        return 1;
803: /* MUTANT (rep_const) */        return -1;
803: /* MUTANT (rep_const) */        return ((2)+1);
803: /* MUTANT (rep_const) */        return ((2)-1);
805: /* MUTANT (rep_const) */        return 0;
805: /* MUTANT (rep_const) */        return 1;
805: /* MUTANT (rep_const) */        return -1;
805: /* MUTANT (rep_const) */        return ((5)+1);
805: /* MUTANT (rep_const) */        return ((5)-1);
807: /* MUTANT (rep_const) */        return 0;
807: /* MUTANT (rep_const) */        return 1;
807: /* MUTANT (rep_const) */        return -1;
807: /* MUTANT (rep_const) */        return ((4)+1);
807: /* MUTANT (rep_const) */        return ((4)-1);
809: /* MUTANT (rep_const) */        return 0;
809: /* MUTANT (rep_const) */        return 1;
809: /* MUTANT (rep_const) */        return -1;
809: /* MUTANT (rep_const) */        return ((4)+1);
809: /* MUTANT (rep_const) */        return ((4)-1);
811: /* MUTANT (rep_const) */        return 0;
811: /* MUTANT (rep_const) */        return 1;
811: /* MUTANT (rep_const) */        return -1;
811: /* MUTANT (rep_const) */        return ((4)+1);
811: /* MUTANT (rep_const) */        return ((4)-1);
814: /* MUTANT (rep_const) */    return 0;
814: /* MUTANT (rep_const) */    return 1;
814: /* MUTANT (rep_const) */    return ((-1)+1);
814: /* MUTANT (rep_const) */    return ((-1)-1);
818: /* MUTANT (del_stmt) */ /*     int i; */ 
819: /* MUTANT (del_stmt) */ /*     int j; */ 
820: /* MUTANT (del_stmt) */ /*     int k; */ 
821: /* MUTANT (del_stmt) */ /*     int index; */ 
822: /* MUTANT (del_stmt) */ /*     int currentPlayer = whoseTurn(state); */ 
823: /* MUTANT (del_stmt) */ /*     int nextPlayer = currentPlayer + 1; */ 
823: /* MUTANT (rep_op) */    int nextPlayer = currentPlayer - 1;
823: /* MUTANT (rep_op) */    int nextPlayer = currentPlayer * 1;
823: /* MUTANT (rep_op) */    int nextPlayer = currentPlayer % 1;
823: /* MUTANT (rep_const) */    int nextPlayer = currentPlayer + 0;
823: /* MUTANT (rep_const) */    int nextPlayer = currentPlayer + -1;
823: /* MUTANT (rep_const) */    int nextPlayer = currentPlayer + ((1)+1);
825: /* MUTANT (del_stmt) */ /*     int tributeRevealedCards[2] = {-1, -1}; */ 
825: /* MUTANT (rep_const) */    int tributeRevealedCards[0] = {-1, -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[1] = {-1, -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[-1] = {-1, -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[((2)+1)] = {-1, -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[((2)-1)] = {-1, -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[2] = {0, -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[2] = {1, -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[2] = {((-1)+1), -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[2] = {((-1)-1), -1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[2] = {-1, 0};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[2] = {-1, 1};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[2] = {-1, ((-1)+1)};
825: /* MUTANT (rep_const) */    int tributeRevealedCards[2] = {-1, ((-1)-1)};
826: /* MUTANT (rep_op) */    if (nextPlayer <= (state->numPlayers - 1)) {
826: /* MUTANT (rep_op) */    if (nextPlayer < (state->numPlayers - 1)) {
826: /* MUTANT (rep_op) */    if (nextPlayer >= (state->numPlayers - 1)) {
826: /* MUTANT (rep_op) */    if (nextPlayer == (state->numPlayers - 1)) {
826: /* MUTANT (rep_op) */    if (nextPlayer != (state->numPlayers - 1)) {
826: /* MUTANT (rep_const) */    if (nextPlayer > (state->numPlayers - 0)) {
826: /* MUTANT (rep_const) */    if (nextPlayer > (state->numPlayers - -1)) {
826: /* MUTANT (rep_const) */    if (nextPlayer > (state->numPlayers - ((1)+1))) {
826: /* MUTANT (negate) */    if(! (nextPlayer > (state->numPlayers - 1))) {
827: /* MUTANT (del_stmt) */ /*         nextPlayer = 0; */ 
827: /* MUTANT (rep_const) */        nextPlayer = 1;
827: /* MUTANT (rep_const) */        nextPlayer = -1;
834: /* MUTANT (del_stmt) */ /*             return 0; */ 
834: /* MUTANT (rep_const) */            return 1;
834: /* MUTANT (rep_const) */            return -1;
838: /* MUTANT (del_stmt) */ /*             return 0; */ 
838: /* MUTANT (rep_const) */            return 1;
838: /* MUTANT (rep_const) */            return -1;
842: /* MUTANT (del_stmt) */ /*             return 0; */ 
842: /* MUTANT (rep_const) */            return 1;
842: /* MUTANT (rep_const) */            return -1;
845: /* MUTANT (rep_const) */            return 0;
845: /* MUTANT (rep_const) */            return 1;
845: /* MUTANT (rep_const) */            return ((-1)+1);
845: /* MUTANT (rep_const) */            return ((-1)-1);
855: /* MUTANT (rep_op) */            for (i = 0; i <= 3; i++)
855: /* MUTANT (rep_op) */            for (i = 0; i > 3; i++)
855: /* MUTANT (rep_op) */            for (i = 0; i >= 3; i++)
855: /* MUTANT (rep_op) */            for (i = 0; i == 3; i++)
855: /* MUTANT (rep_op) */            for (i = 0; i != 3; i++)
855: /* MUTANT (rep_op) */            for (i = 0; i < 3; i--)
855: /* MUTANT (rep_const) */            for (i = 1; i < 3; i++)
855: /* MUTANT (rep_const) */            for (i = -1; i < 3; i++)
855: /* MUTANT (rep_const) */            for (i = 0; i < 0; i++)
855: /* MUTANT (rep_const) */            for (i = 0; i < 1; i++)
855: /* MUTANT (rep_const) */            for (i = 0; i < -1; i++)
855: /* MUTANT (rep_const) */            for (i = 0; i < ((3)+1); i++)
855: /* MUTANT (rep_const) */            for (i = 0; i < ((3)-1); i++)
857: /* MUTANT (del_stmt) */ /*                 drawCard(currentPlayer, state); */ 
861: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
861: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
862: /* MUTANT (del_stmt) */ /*             return 0; */ 
862: /* MUTANT (rep_const) */            return 1;
862: /* MUTANT (rep_const) */            return -1;
869: /* MUTANT (del_stmt) */ /*             state->numActions = state->numActions + 2; */ 
869: /* MUTANT (rep_op) */            state->numActions = state->numActions - 2;
869: /* MUTANT (rep_op) */            state->numActions = state->numActions * 2;
869: /* MUTANT (rep_op) */            state->numActions = state->numActions % 2;
869: /* MUTANT (rep_const) */            state->numActions = state->numActions + 0;
869: /* MUTANT (rep_const) */            state->numActions = state->numActions + 1;
869: /* MUTANT (rep_const) */            state->numActions = state->numActions + -1;
869: /* MUTANT (rep_const) */            state->numActions = state->numActions + ((2)+1);
869: /* MUTANT (rep_const) */            state->numActions = state->numActions + ((2)-1);
872: /* MUTANT (del_stmt) */ /*             discardCard(handPos, currentPlayer, state, 0); */ 
872: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
872: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
873: /* MUTANT (del_stmt) */ /*             return 0; */ 
873: /* MUTANT (rep_const) */            return 1;
873: /* MUTANT (rep_const) */            return -1;
876: /* MUTANT (rep_op) */            state->numBuys--; //Increase buys by 1!
877: /* MUTANT (rep_op) */            if (choice1 <= 0) { //Boolean true or going to discard an estate
877: /* MUTANT (rep_op) */            if (choice1 < 0) { //Boolean true or going to discard an estate
877: /* MUTANT (rep_op) */            if (choice1 >= 0) { //Boolean true or going to discard an estate
877: /* MUTANT (rep_op) */            if (choice1 == 0) { //Boolean true or going to discard an estate
877: /* MUTANT (rep_op) */            if (choice1 != 0) { //Boolean true or going to discard an estate
877: /* MUTANT (rep_const) */            if (choice1 > 1) { //Boolean true or going to discard an estate
877: /* MUTANT (rep_const) */            if (choice1 > -1) { //Boolean true or going to discard an estate
877: /* MUTANT (negate) */            if(! (choice1 > 0)) { //Boolean true or going to discard an estate
878: /* MUTANT (del_stmt) */ /*                 int p = 0; */  //Iterator for hand!
878: /* MUTANT (rep_const) */                int p = 1; //Iterator for hand!
878: /* MUTANT (rep_const) */                int p = -1; //Iterator for hand!
879: /* MUTANT (del_stmt) */ /*                 int card_not_discarded = 1; */  //Flag for discard set!
879: /* MUTANT (rep_const) */                int card_not_discarded = 0; //Flag for discard set!
879: /* MUTANT (rep_const) */                int card_not_discarded = -1; //Flag for discard set!
879: /* MUTANT (rep_const) */                int card_not_discarded = ((1)+1); //Flag for discard set!
880: /* MUTANT (negate) */                while(!(card_not_discarded)) {
881: /* MUTANT (rep_op) */                    if (state->hand[currentPlayer][p] != estate) { //Found an estate card!
881: /* MUTANT (negate) */                    if(! (state->hand[currentPlayer][p] == estate)) { //Found an estate card!
882: /* MUTANT (del_stmt) */ /*                         state->coins += 4; */  //Add 4 coins to the amount of coins
882: /* MUTANT (rep_op) */                        state->coins -= 4; //Add 4 coins to the amount of coins
882: /* MUTANT (rep_op) */                        state->coins *= 4; //Add 4 coins to the amount of coins
882: /* MUTANT (rep_op) */                        state->coins %= 4; //Add 4 coins to the amount of coins
882: /* MUTANT (rep_const) */                        state->coins += 0; //Add 4 coins to the amount of coins
882: /* MUTANT (rep_const) */                        state->coins += 1; //Add 4 coins to the amount of coins
882: /* MUTANT (rep_const) */                        state->coins += -1; //Add 4 coins to the amount of coins
882: /* MUTANT (rep_const) */                        state->coins += ((4)+1); //Add 4 coins to the amount of coins
882: /* MUTANT (rep_const) */                        state->coins += ((4)-1); //Add 4 coins to the amount of coins
883: /* MUTANT (del_stmt) */ /*                         state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p]; */ 
884: /* MUTANT (del_stmt) */ /*                         state->discardCount[currentPlayer]++; */ 
884: /* MUTANT (rep_op) */                        state->discardCount[currentPlayer]--;
885: /* MUTANT (rep_op) */                        for (; p <= state->handCount[currentPlayer]; p++) {
885: /* MUTANT (rep_op) */                        for (; p > state->handCount[currentPlayer]; p++) {
885: /* MUTANT (rep_op) */                        for (; p >= state->handCount[currentPlayer]; p++) {
885: /* MUTANT (rep_op) */                        for (; p == state->handCount[currentPlayer]; p++) {
885: /* MUTANT (rep_op) */                        for (; p != state->handCount[currentPlayer]; p++) {
885: /* MUTANT (rep_op) */                        for (; p < state->handCount[currentPlayer]; p--) {
886: /* MUTANT (del_stmt) */ /*                             state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1]; */ 
886: /* MUTANT (rep_op) */                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p-1];
886: /* MUTANT (rep_op) */                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p*1];
886: /* MUTANT (rep_op) */                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p%1];
886: /* MUTANT (rep_const) */                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+0];
886: /* MUTANT (rep_const) */                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+-1];
886: /* MUTANT (rep_const) */                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+((1)+1)];
888: /* MUTANT (rep_const) */                        state->hand[currentPlayer][state->handCount[currentPlayer]] = 0;
888: /* MUTANT (rep_const) */                        state->hand[currentPlayer][state->handCount[currentPlayer]] = 1;
888: /* MUTANT (rep_const) */                        state->hand[currentPlayer][state->handCount[currentPlayer]] = ((-1)+1);
888: /* MUTANT (rep_const) */                        state->hand[currentPlayer][state->handCount[currentPlayer]] = ((-1)-1);
889: /* MUTANT (del_stmt) */ /*                         state->handCount[currentPlayer]--; */ 
889: /* MUTANT (rep_op) */                        state->handCount[currentPlayer]++;
890: /* MUTANT (del_stmt) */ /*                         card_not_discarded = 0; */  //Exit the loop
890: /* MUTANT (rep_const) */                        card_not_discarded = 1; //Exit the loop
890: /* MUTANT (rep_const) */                        card_not_discarded = -1; //Exit the loop
892: /* MUTANT (rep_op) */                    else if (p <= state->handCount[currentPlayer]) {
892: /* MUTANT (rep_op) */                    else if (p < state->handCount[currentPlayer]) {
892: /* MUTANT (rep_op) */                    else if (p >= state->handCount[currentPlayer]) {
892: /* MUTANT (rep_op) */                    else if (p == state->handCount[currentPlayer]) {
892: /* MUTANT (rep_op) */                    else if (p != state->handCount[currentPlayer]) {
892: /* MUTANT (negate) */                    else if(! (p > state->handCount[currentPlayer])) {
893: /* MUTANT (negate) */                        if(!(DEBUG)) {
894: /* MUTANT (del_stmt) */ /*                             printf("No estate cards in your hand, invalid choice\n"); */ 
895: /* MUTANT (del_stmt) */ /*                             printf("Must gain an estate if there are any\n"); */ 
897: /* MUTANT (rep_op) */                        if (supplyCount(estate, state) <= 0) {
897: /* MUTANT (rep_op) */                        if (supplyCount(estate, state) < 0) {
897: /* MUTANT (rep_op) */                        if (supplyCount(estate, state) >= 0) {
897: /* MUTANT (rep_op) */                        if (supplyCount(estate, state) == 0) {
897: /* MUTANT (rep_op) */                        if (supplyCount(estate, state) != 0) {
897: /* MUTANT (rep_const) */                        if (supplyCount(estate, state) > 1) {
897: /* MUTANT (rep_const) */                        if (supplyCount(estate, state) > -1) {
897: /* MUTANT (negate) */                        if(! (supplyCount(estate, state) > 0)) {
898: /* MUTANT (del_stmt) */ /*                             gainCard(estate, state, 0, currentPlayer); */ 
898: /* MUTANT (rep_const) */                            gainCard(estate, state, 1, currentPlayer);
898: /* MUTANT (rep_const) */                            gainCard(estate, state, -1, currentPlayer);
899: /* MUTANT (del_stmt) */ /*                             state->supplyCount[estate]--; */  //Decrement estates
899: /* MUTANT (rep_op) */                            state->supplyCount[estate]++; //Decrement estates
900: /* MUTANT (rep_op) */                            if (supplyCount(estate, state) != 0) {
900: /* MUTANT (rep_const) */                            if (supplyCount(estate, state) == 1) {
900: /* MUTANT (rep_const) */                            if (supplyCount(estate, state) == -1) {
900: /* MUTANT (negate) */                            if(! (supplyCount(estate, state) == 0)) {
901: /* MUTANT (del_stmt) */ /*                                 isGameOver(state); */ 
904: /* MUTANT (rep_const) */                        card_not_discarded = 1; //Exit the loop
904: /* MUTANT (rep_const) */                        card_not_discarded = -1; //Exit the loop
908: /* MUTANT (del_stmt) */ /*                         p++; */  //Next card
908: /* MUTANT (rep_op) */                        p--; //Next card
914: /* MUTANT (rep_op) */                if (supplyCount(estate, state) <= 0) {
914: /* MUTANT (rep_op) */                if (supplyCount(estate, state) < 0) {
914: /* MUTANT (rep_op) */                if (supplyCount(estate, state) >= 0) {
914: /* MUTANT (rep_op) */                if (supplyCount(estate, state) == 0) {
914: /* MUTANT (rep_op) */                if (supplyCount(estate, state) != 0) {
914: /* MUTANT (rep_const) */                if (supplyCount(estate, state) > 1) {
914: /* MUTANT (rep_const) */                if (supplyCount(estate, state) > -1) {
914: /* MUTANT (negate) */                if(! (supplyCount(estate, state) > 0)) {
915: /* MUTANT (del_stmt) */ /*                     gainCard(estate, state, 0, currentPlayer); */  //Gain an estate
915: /* MUTANT (rep_const) */                    gainCard(estate, state, 1, currentPlayer); //Gain an estate
915: /* MUTANT (rep_const) */                    gainCard(estate, state, -1, currentPlayer); //Gain an estate
916: /* MUTANT (del_stmt) */ /*                     state->supplyCount[estate]--; */  //Decrement Estates
916: /* MUTANT (rep_op) */                    state->supplyCount[estate]++; //Decrement Estates
917: /* MUTANT (rep_op) */                    if (supplyCount(estate, state) != 0) {
917: /* MUTANT (rep_const) */                    if (supplyCount(estate, state) == 1) {
917: /* MUTANT (rep_const) */                    if (supplyCount(estate, state) == -1) {
917: /* MUTANT (negate) */                    if(! (supplyCount(estate, state) == 0)) {
918: /* MUTANT (del_stmt) */ /*                         isGameOver(state); */ 
924: /* MUTANT (rep_const) */            return 1;
924: /* MUTANT (rep_const) */            return -1;
931: /* MUTANT (del_stmt) */ /*             state->numActions++; */ 
931: /* MUTANT (rep_op) */            state->numActions--;
934: /* MUTANT (del_stmt) */ /*             discardCard(handPos, currentPlayer, state, 0); */ 
934: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
934: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
935: /* MUTANT (del_stmt) */ /*             return 0; */ 
935: /* MUTANT (rep_const) */            return 1;
935: /* MUTANT (rep_const) */            return -1;
939: /* MUTANT (rep_op) */            state->numActions--;
942: /* MUTANT (del_stmt) */ /*             discardCard(handPos, currentPlayer, state, 0); */ 
942: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
942: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
944: /* MUTANT (negate) */            if(! (choice1))            //+2 coins
946: /* MUTANT (del_stmt) */ /*                 state->coins = state->coins + 2; */ 
946: /* MUTANT (rep_op) */                state->coins = state->coins - 2;
946: /* MUTANT (rep_op) */                state->coins = state->coins * 2;
946: /* MUTANT (rep_op) */                state->coins = state->coins % 2;
946: /* MUTANT (rep_const) */                state->coins = state->coins + 0;
946: /* MUTANT (rep_const) */                state->coins = state->coins + 1;
946: /* MUTANT (rep_const) */                state->coins = state->coins + -1;
946: /* MUTANT (rep_const) */                state->coins = state->coins + ((2)+1);
946: /* MUTANT (rep_const) */                state->coins = state->coins + ((2)-1);
949: /* MUTANT (negate) */            else if(! (choice2))       //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
952: /* MUTANT (rep_op) */                while(numHandCards(state) <= 0)
952: /* MUTANT (rep_op) */                while(numHandCards(state) < 0)
952: /* MUTANT (rep_op) */                while(numHandCards(state) >= 0)
952: /* MUTANT (rep_op) */                while(numHandCards(state) == 0)
952: /* MUTANT (rep_op) */                while(numHandCards(state) != 0)
952: /* MUTANT (rep_const) */                while(numHandCards(state) > 1)
952: /* MUTANT (rep_const) */                while(numHandCards(state) > -1)
952: /* MUTANT (negate) */                while(!(numHandCards(state) > 0))
954: /* MUTANT (del_stmt) */ /*                     discardCard(handPos, currentPlayer, state, 0); */ 
954: /* MUTANT (rep_const) */                    discardCard(handPos, currentPlayer, state, 1);
954: /* MUTANT (rep_const) */                    discardCard(handPos, currentPlayer, state, -1);
958: /* MUTANT (rep_op) */                for (i = 0; i <= 4; i++)
958: /* MUTANT (rep_op) */                for (i = 0; i > 4; i++)
958: /* MUTANT (rep_op) */                for (i = 0; i >= 4; i++)
958: /* MUTANT (rep_op) */                for (i = 0; i == 4; i++)
958: /* MUTANT (rep_op) */                for (i = 0; i != 4; i++)
958: /* MUTANT (rep_op) */                for (i = 0; i < 4; i--)
958: /* MUTANT (rep_const) */                for (i = 1; i < 4; i++)
958: /* MUTANT (rep_const) */                for (i = -1; i < 4; i++)
958: /* MUTANT (rep_const) */                for (i = 0; i < 0; i++)
958: /* MUTANT (rep_const) */                for (i = 0; i < 1; i++)
958: /* MUTANT (rep_const) */                for (i = 0; i < -1; i++)
958: /* MUTANT (rep_const) */                for (i = 0; i < ((4)+1); i++)
958: /* MUTANT (rep_const) */                for (i = 0; i < ((4)-1); i++)
960: /* MUTANT (del_stmt) */ /*                     drawCard(currentPlayer, state); */ 
964: /* MUTANT (rep_op) */                for (i = 0; i <= state->numPlayers; i++)
964: /* MUTANT (rep_op) */                for (i = 0; i > state->numPlayers; i++)
964: /* MUTANT (rep_op) */                for (i = 0; i >= state->numPlayers; i++)
964: /* MUTANT (rep_op) */                for (i = 0; i == state->numPlayers; i++)
964: /* MUTANT (rep_op) */                for (i = 0; i != state->numPlayers; i++)
964: /* MUTANT (rep_op) */                for (i = 0; i < state->numPlayers; i--)
964: /* MUTANT (rep_const) */                for (i = 1; i < state->numPlayers; i++)
964: /* MUTANT (rep_const) */                for (i = -1; i < state->numPlayers; i++)
966: /* MUTANT (rep_op) */                    if (i == currentPlayer)
966: /* MUTANT (negate) */                    if(! (i != currentPlayer))
968: /* MUTANT (rep_op) */                        if ( state->handCount[i] <= 4 )
968: /* MUTANT (rep_op) */                        if ( state->handCount[i] < 4 )
968: /* MUTANT (rep_op) */                        if ( state->handCount[i] >= 4 )
968: /* MUTANT (rep_op) */                        if ( state->handCount[i] == 4 )
968: /* MUTANT (rep_op) */                        if ( state->handCount[i] != 4 )
968: /* MUTANT (rep_const) */                        if ( state->handCount[i] > 0 )
968: /* MUTANT (rep_const) */                        if ( state->handCount[i] > 1 )
968: /* MUTANT (rep_const) */                        if ( state->handCount[i] > -1 )
968: /* MUTANT (rep_const) */                        if ( state->handCount[i] > ((4)+1) )
968: /* MUTANT (rep_const) */                        if ( state->handCount[i] > ((4)-1) )
968: /* MUTANT (negate) */                        if(! ( state->handCount[i] > 4 ))
971: /* MUTANT (rep_op) */                            while( state->handCount[i] <= 0 )
971: /* MUTANT (rep_op) */                            while( state->handCount[i] < 0 )
971: /* MUTANT (rep_op) */                            while( state->handCount[i] >= 0 )
971: /* MUTANT (rep_op) */                            while( state->handCount[i] == 0 )
971: /* MUTANT (rep_op) */                            while( state->handCount[i] != 0 )
971: /* MUTANT (rep_const) */                            while( state->handCount[i] > 1 )
971: /* MUTANT (rep_const) */                            while( state->handCount[i] > -1 )
971: /* MUTANT (negate) */                            while(!( state->handCount[i] > 0 ))
973: /* MUTANT (del_stmt) */ /*                                 discardCard(handPos, i, state, 0); */ 
973: /* MUTANT (rep_const) */                                discardCard(handPos, i, state, 1);
973: /* MUTANT (rep_const) */                                discardCard(handPos, i, state, -1);
977: /* MUTANT (rep_op) */                            for (j = 0; j <= 4; j++)
977: /* MUTANT (rep_op) */                            for (j = 0; j > 4; j++)
977: /* MUTANT (rep_op) */                            for (j = 0; j >= 4; j++)
977: /* MUTANT (rep_op) */                            for (j = 0; j == 4; j++)
977: /* MUTANT (rep_op) */                            for (j = 0; j != 4; j++)
977: /* MUTANT (rep_op) */                            for (j = 0; j < 4; j--)
977: /* MUTANT (rep_const) */                            for (j = 1; j < 4; j++)
977: /* MUTANT (rep_const) */                            for (j = -1; j < 4; j++)
977: /* MUTANT (rep_const) */                            for (j = 0; j < 0; j++)
977: /* MUTANT (rep_const) */                            for (j = 0; j < 1; j++)
977: /* MUTANT (rep_const) */                            for (j = 0; j < -1; j++)
977: /* MUTANT (rep_const) */                            for (j = 0; j < ((4)+1); j++)
977: /* MUTANT (rep_const) */                            for (j = 0; j < ((4)-1); j++)
979: /* MUTANT (del_stmt) */ /*                                 drawCard(i, state); */ 
986: /* MUTANT (rep_const) */            return 1;
986: /* MUTANT (rep_const) */            return -1;
989: /* MUTANT (rep_op) */            if (choice1 != 1)
989: /* MUTANT (rep_const) */            if (choice1 == 0)
989: /* MUTANT (rep_const) */            if (choice1 == -1)
989: /* MUTANT (rep_const) */            if (choice1 == ((1)+1))
989: /* MUTANT (negate) */            if(! (choice1 == 1))
992: /* MUTANT (del_stmt) */ /*                 drawCard(currentPlayer, state); */ 
993: /* MUTANT (del_stmt) */ /*                 drawCard(currentPlayer, state); */ 
995: /* MUTANT (rep_op) */            else if (choice1 != 2)
995: /* MUTANT (rep_const) */            else if (choice1 == 0)
995: /* MUTANT (rep_const) */            else if (choice1 == 1)
995: /* MUTANT (rep_const) */            else if (choice1 == -1)
995: /* MUTANT (rep_const) */            else if (choice1 == ((2)+1))
995: /* MUTANT (rep_const) */            else if (choice1 == ((2)-1))
995: /* MUTANT (negate) */            else if(! (choice1 == 2))
998: /* MUTANT (del_stmt) */ /*                 state->coins = state->coins + 2; */ 
998: /* MUTANT (rep_op) */                state->coins = state->coins - 2;
998: /* MUTANT (rep_op) */                state->coins = state->coins * 2;
998: /* MUTANT (rep_op) */                state->coins = state->coins % 2;
998: /* MUTANT (rep_const) */                state->coins = state->coins + 0;
998: /* MUTANT (rep_const) */                state->coins = state->coins + 1;
998: /* MUTANT (rep_const) */                state->coins = state->coins + -1;
998: /* MUTANT (rep_const) */                state->coins = state->coins + ((2)+1);
998: /* MUTANT (rep_const) */                state->coins = state->coins + ((2)-1);
1003: /* MUTANT (del_stmt) */ /*                 discardCard(choice2, currentPlayer, state, 1); */ 
1003: /* MUTANT (rep_const) */                discardCard(choice2, currentPlayer, state, 0);
1003: /* MUTANT (rep_const) */                discardCard(choice2, currentPlayer, state, -1);
1003: /* MUTANT (rep_const) */                discardCard(choice2, currentPlayer, state, ((1)+1));
1004: /* MUTANT (del_stmt) */ /*                 discardCard(choice3, currentPlayer, state, 1); */ 
1004: /* MUTANT (rep_const) */                discardCard(choice3, currentPlayer, state, 0);
1004: /* MUTANT (rep_const) */                discardCard(choice3, currentPlayer, state, -1);
1004: /* MUTANT (rep_const) */                discardCard(choice3, currentPlayer, state, ((1)+1));
1008: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
1008: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
1009: /* MUTANT (del_stmt) */ /*             return 0; */ 
1009: /* MUTANT (rep_const) */            return 1;
1009: /* MUTANT (rep_const) */            return -1;
1012: /* MUTANT (rep_op) */            if ((state->discardCount[nextPlayer] - state->deckCount[nextPlayer]) <= 1) {
1012: /* MUTANT (rep_op) */            if ((state->discardCount[nextPlayer] * state->deckCount[nextPlayer]) <= 1) {
1012: /* MUTANT (rep_op) */            if ((state->discardCount[nextPlayer] % state->deckCount[nextPlayer]) <= 1) {
1012: /* MUTANT (rep_op) */            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) < 1) {
1012: /* MUTANT (rep_op) */            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) > 1) {
1012: /* MUTANT (rep_op) */            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) >= 1) {
1012: /* MUTANT (rep_op) */            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) == 1) {
1012: /* MUTANT (rep_op) */            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) != 1) {
1012: /* MUTANT (rep_const) */            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 0) {
1012: /* MUTANT (rep_const) */            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= -1) {
1012: /* MUTANT (rep_const) */            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= ((1)+1)) {
1012: /* MUTANT (negate) */            if(! ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)) {
1013: /* MUTANT (rep_op) */                if (state->deckCount[nextPlayer] <= 0) {
1013: /* MUTANT (rep_op) */                if (state->deckCount[nextPlayer] < 0) {
1013: /* MUTANT (rep_op) */                if (state->deckCount[nextPlayer] >= 0) {
1013: /* MUTANT (rep_op) */                if (state->deckCount[nextPlayer] == 0) {
1013: /* MUTANT (rep_op) */                if (state->deckCount[nextPlayer] != 0) {
1013: /* MUTANT (rep_const) */                if (state->deckCount[nextPlayer] > 1) {
1013: /* MUTANT (rep_const) */                if (state->deckCount[nextPlayer] > -1) {
1013: /* MUTANT (negate) */                if(! (state->deckCount[nextPlayer] > 0)) {
1014: /* MUTANT (del_stmt) */ /*                     tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1]; */ 
1014: /* MUTANT (rep_const) */                    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1014: /* MUTANT (rep_const) */                    tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1014: /* MUTANT (rep_const) */                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]0];
1014: /* MUTANT (rep_const) */                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]1];
1014: /* MUTANT (rep_const) */                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)+1)];
1014: /* MUTANT (rep_const) */                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)-1)];
1015: /* MUTANT (del_stmt) */ /*                     state->deckCount[nextPlayer]--; */ 
1015: /* MUTANT (rep_op) */                    state->deckCount[nextPlayer]++;
1017: /* MUTANT (rep_op) */                else if (state->discardCount[nextPlayer] <= 0) {
1017: /* MUTANT (rep_op) */                else if (state->discardCount[nextPlayer] < 0) {
1017: /* MUTANT (rep_op) */                else if (state->discardCount[nextPlayer] >= 0) {
1017: /* MUTANT (rep_op) */                else if (state->discardCount[nextPlayer] == 0) {
1017: /* MUTANT (rep_op) */                else if (state->discardCount[nextPlayer] != 0) {
1017: /* MUTANT (rep_const) */                else if (state->discardCount[nextPlayer] > 1) {
1017: /* MUTANT (rep_const) */                else if (state->discardCount[nextPlayer] > -1) {
1017: /* MUTANT (negate) */                else if(! (state->discardCount[nextPlayer] > 0)) {
1018: /* MUTANT (del_stmt) */ /*                     tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1]; */ 
1018: /* MUTANT (rep_const) */                    tributeRevealedCards[1] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
1018: /* MUTANT (rep_const) */                    tributeRevealedCards[-1] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
1018: /* MUTANT (rep_const) */                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]0];
1018: /* MUTANT (rep_const) */                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]1];
1018: /* MUTANT (rep_const) */                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]((-1)+1)];
1018: /* MUTANT (rep_const) */                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]((-1)-1)];
1019: /* MUTANT (del_stmt) */ /*                     state->discardCount[nextPlayer]--; */ 
1019: /* MUTANT (rep_op) */                    state->discardCount[nextPlayer]++;
1023: /* MUTANT (negate) */                    if(! (DEBUG)) {
1024: /* MUTANT (del_stmt) */ /*                         printf("No cards to reveal\n"); */ 
1030: /* MUTANT (rep_op) */                if (state->deckCount[nextPlayer] != 0) {
1030: /* MUTANT (rep_const) */                if (state->deckCount[nextPlayer] == 1) {
1030: /* MUTANT (rep_const) */                if (state->deckCount[nextPlayer] == -1) {
1030: /* MUTANT (negate) */                if(! (state->deckCount[nextPlayer] == 0)) {
1031: /* MUTANT (rep_op) */                    for (i = 0; i <= state->discardCount[nextPlayer]; i++) {
1031: /* MUTANT (rep_op) */                    for (i = 0; i > state->discardCount[nextPlayer]; i++) {
1031: /* MUTANT (rep_op) */                    for (i = 0; i >= state->discardCount[nextPlayer]; i++) {
1031: /* MUTANT (rep_op) */                    for (i = 0; i == state->discardCount[nextPlayer]; i++) {
1031: /* MUTANT (rep_op) */                    for (i = 0; i != state->discardCount[nextPlayer]; i++) {
1031: /* MUTANT (rep_op) */                    for (i = 0; i < state->discardCount[nextPlayer]; i--) {
1031: /* MUTANT (rep_const) */                    for (i = 1; i < state->discardCount[nextPlayer]; i++) {
1031: /* MUTANT (rep_const) */                    for (i = -1; i < state->discardCount[nextPlayer]; i++) {
1032: /* MUTANT (del_stmt) */ /*                         state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; */  //Move to deck
1033: /* MUTANT (del_stmt) */ /*                         state->deckCount[nextPlayer]++; */ 
1033: /* MUTANT (rep_op) */                        state->deckCount[nextPlayer]--;
1034: /* MUTANT (del_stmt) */ /*                         state->discard[nextPlayer][i] = -1; */ 
1034: /* MUTANT (rep_const) */                        state->discard[nextPlayer][i] = 0;
1034: /* MUTANT (rep_const) */                        state->discard[nextPlayer][i] = 1;
1034: /* MUTANT (rep_const) */                        state->discard[nextPlayer][i] = ((-1)+1);
1034: /* MUTANT (rep_const) */                        state->discard[nextPlayer][i] = ((-1)-1);
1035: /* MUTANT (del_stmt) */ /*                         state->discardCount[nextPlayer]--; */ 
1035: /* MUTANT (rep_op) */                        state->discardCount[nextPlayer]++;
1040: /* MUTANT (rep_const) */                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1040: /* MUTANT (rep_const) */                tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1040: /* MUTANT (rep_const) */                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]0];
1040: /* MUTANT (rep_const) */                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]1];
1040: /* MUTANT (rep_const) */                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)+1)];
1040: /* MUTANT (rep_const) */                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)-1)];
1041: /* MUTANT (del_stmt) */ /*                 state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1; */ 
1041: /* MUTANT (rep_op) */                state->deck[nextPlayer][state->deckCount[nextPlayer]++] = -1;
1041: /* MUTANT (rep_const) */                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = 0;
1041: /* MUTANT (rep_const) */                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = 1;
1041: /* MUTANT (rep_const) */                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = ((-1)+1);
1041: /* MUTANT (rep_const) */                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = ((-1)-1);
1042: /* MUTANT (del_stmt) */ /*                 state->deckCount[nextPlayer]--; */ 
1042: /* MUTANT (rep_op) */                state->deckCount[nextPlayer]++;
1043: /* MUTANT (del_stmt) */ /*                 tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1]; */ 
1043: /* MUTANT (rep_const) */                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1043: /* MUTANT (rep_const) */                tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1043: /* MUTANT (rep_const) */                tributeRevealedCards[((1)+1)] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1043: /* MUTANT (rep_const) */                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]0];
1043: /* MUTANT (rep_const) */                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]1];
1043: /* MUTANT (rep_const) */                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)+1)];
1043: /* MUTANT (rep_const) */                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)-1)];
1044: /* MUTANT (del_stmt) */ /*                 state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1; */ 
1044: /* MUTANT (rep_op) */                state->deck[nextPlayer][state->deckCount[nextPlayer]++] = -1;
1044: /* MUTANT (rep_const) */                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = 0;
1044: /* MUTANT (rep_const) */                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = 1;
1044: /* MUTANT (rep_const) */                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = ((-1)+1);
1044: /* MUTANT (rep_const) */                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = ((-1)-1);
1045: /* MUTANT (del_stmt) */ /*                 state->deckCount[nextPlayer]--; */ 
1045: /* MUTANT (rep_op) */                state->deckCount[nextPlayer]++;
1048: /* MUTANT (rep_op) */            if (tributeRevealedCards[0] != tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
1048: /* MUTANT (rep_const) */            if (tributeRevealedCards[1] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
1048: /* MUTANT (rep_const) */            if (tributeRevealedCards[-1] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
1048: /* MUTANT (rep_const) */            if (tributeRevealedCards[0] == tributeRevealedCards[0]) { //If we have a duplicate card, just drop one
1048: /* MUTANT (rep_const) */            if (tributeRevealedCards[0] == tributeRevealedCards[-1]) { //If we have a duplicate card, just drop one
1048: /* MUTANT (rep_const) */            if (tributeRevealedCards[0] == tributeRevealedCards[((1)+1)]) { //If we have a duplicate card, just drop one
1048: /* MUTANT (negate) */            if(! (tributeRevealedCards[0] == tributeRevealedCards[1])) { //If we have a duplicate card, just drop one
1049: /* MUTANT (del_stmt) */ /*                 state->playedCards[state->playedCardCount] = tributeRevealedCards[1]; */ 
1049: /* MUTANT (rep_const) */                state->playedCards[state->playedCardCount] = tributeRevealedCards[0];
1049: /* MUTANT (rep_const) */                state->playedCards[state->playedCardCount] = tributeRevealedCards[-1];
1049: /* MUTANT (rep_const) */                state->playedCards[state->playedCardCount] = tributeRevealedCards[((1)+1)];
1050: /* MUTANT (del_stmt) */ /*                 state->playedCardCount++; */ 
1050: /* MUTANT (rep_op) */                state->playedCardCount--;
1051: /* MUTANT (del_stmt) */ /*                 tributeRevealedCards[1] = -1; */ 
1051: /* MUTANT (rep_const) */                tributeRevealedCards[0] = -1;
1051: /* MUTANT (rep_const) */                tributeRevealedCards[-1] = -1;
1051: /* MUTANT (rep_const) */                tributeRevealedCards[((1)+1)] = -1;
1051: /* MUTANT (rep_const) */                tributeRevealedCards[1] = 0;
1051: /* MUTANT (rep_const) */                tributeRevealedCards[1] = 1;
1051: /* MUTANT (rep_const) */                tributeRevealedCards[1] = ((-1)+1);
1051: /* MUTANT (rep_const) */                tributeRevealedCards[1] = ((-1)-1);
1054: /* MUTANT (rep_op) */            for (i = 0; i < 2; i++) {
1054: /* MUTANT (rep_op) */            for (i = 0; i > 2; i++) {
1054: /* MUTANT (rep_op) */            for (i = 0; i >= 2; i++) {
1054: /* MUTANT (rep_op) */            for (i = 0; i == 2; i++) {
1054: /* MUTANT (rep_op) */            for (i = 0; i != 2; i++) {
1054: /* MUTANT (rep_op) */            for (i = 0; i <= 2; i--) {
1054: /* MUTANT (rep_const) */            for (i = 1; i <= 2; i++) {
1054: /* MUTANT (rep_const) */            for (i = -1; i <= 2; i++) {
1054: /* MUTANT (rep_const) */            for (i = 0; i <= 0; i++) {
1054: /* MUTANT (rep_const) */            for (i = 0; i <= 1; i++) {
1054: /* MUTANT (rep_const) */            for (i = 0; i <= -1; i++) {
1054: /* MUTANT (rep_const) */            for (i = 0; i <= ((2)+1); i++) {
1054: /* MUTANT (rep_const) */            for (i = 0; i <= ((2)-1); i++) {
1055: /* MUTANT (rep_op) */                if (tributeRevealedCards[i] != copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
1055: /* MUTANT (rep_op) */                if (tributeRevealedCards[i] == copper && tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
1055: /* MUTANT (rep_op) */                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] != silver || tributeRevealedCards[i] == gold) { //Treasure cards
1055: /* MUTANT (rep_op) */                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver && tributeRevealedCards[i] == gold) { //Treasure cards
1055: /* MUTANT (rep_op) */                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] != gold) { //Treasure cards
1055: /* MUTANT (negate) */                if(! (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)) { //Treasure cards
1056: /* MUTANT (del_stmt) */ /*                     state->coins += 2; */ 
1056: /* MUTANT (rep_op) */                    state->coins -= 2;
1056: /* MUTANT (rep_op) */                    state->coins *= 2;
1056: /* MUTANT (rep_op) */                    state->coins %= 2;
1056: /* MUTANT (rep_const) */                    state->coins += 0;
1056: /* MUTANT (rep_const) */                    state->coins += 1;
1056: /* MUTANT (rep_const) */                    state->coins += -1;
1056: /* MUTANT (rep_const) */                    state->coins += ((2)+1);
1056: /* MUTANT (rep_const) */                    state->coins += ((2)-1);
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] != estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] == estate && tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] != duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy && tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] != province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province && tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] != gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens && tributeRevealedCards[i] == great_hall) { //Victory Card Found
1059: /* MUTANT (rep_op) */                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] != great_hall) { //Victory Card Found
1059: /* MUTANT (negate) */                else if(! (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)) { //Victory Card Found
1060: /* MUTANT (del_stmt) */ /*                     drawCard(currentPlayer, state); */ 
1061: /* MUTANT (del_stmt) */ /*                     drawCard(currentPlayer, state); */ 
1064: /* MUTANT (del_stmt) */ /*                     state->numActions = state->numActions + 2; */ 
1064: /* MUTANT (rep_op) */                    state->numActions = state->numActions - 2;
1064: /* MUTANT (rep_op) */                    state->numActions = state->numActions * 2;
1064: /* MUTANT (rep_op) */                    state->numActions = state->numActions % 2;
1064: /* MUTANT (rep_const) */                    state->numActions = state->numActions + 0;
1064: /* MUTANT (rep_const) */                    state->numActions = state->numActions + 1;
1064: /* MUTANT (rep_const) */                    state->numActions = state->numActions + -1;
1064: /* MUTANT (rep_const) */                    state->numActions = state->numActions + ((2)+1);
1064: /* MUTANT (rep_const) */                    state->numActions = state->numActions + ((2)-1);
1068: /* MUTANT (rep_const) */            return 1;
1068: /* MUTANT (rep_const) */            return -1;
1071: /* MUTANT (rep_const) */            j = 1;          //used to check if player has enough cards to discard
1071: /* MUTANT (rep_const) */            j = -1;          //used to check if player has enough cards to discard
1073: /* MUTANT (rep_op) */            if (choice2 <= 2 || choice2 < 0)
1073: /* MUTANT (rep_op) */            if (choice2 < 2 || choice2 < 0)
1073: /* MUTANT (rep_op) */            if (choice2 >= 2 || choice2 < 0)
1073: /* MUTANT (rep_op) */            if (choice2 == 2 || choice2 < 0)
1073: /* MUTANT (rep_op) */            if (choice2 != 2 || choice2 < 0)
1073: /* MUTANT (rep_op) */            if (choice2 > 2 && choice2 < 0)
1073: /* MUTANT (rep_op) */            if (choice2 > 2 || choice2 <= 0)
1073: /* MUTANT (rep_op) */            if (choice2 > 2 || choice2 > 0)
1073: /* MUTANT (rep_op) */            if (choice2 > 2 || choice2 >= 0)
1073: /* MUTANT (rep_op) */            if (choice2 > 2 || choice2 == 0)
1073: /* MUTANT (rep_op) */            if (choice2 > 2 || choice2 != 0)
1073: /* MUTANT (rep_const) */            if (choice2 > 0 || choice2 < 0)
1073: /* MUTANT (rep_const) */            if (choice2 > 1 || choice2 < 0)
1073: /* MUTANT (rep_const) */            if (choice2 > -1 || choice2 < 0)
1073: /* MUTANT (rep_const) */            if (choice2 > ((2)+1) || choice2 < 0)
1073: /* MUTANT (rep_const) */            if (choice2 > ((2)-1) || choice2 < 0)
1073: /* MUTANT (rep_const) */            if (choice2 > 2 || choice2 < 1)
1073: /* MUTANT (rep_const) */            if (choice2 > 2 || choice2 < -1)
1073: /* MUTANT (negate) */            if(! (choice2 > 2 || choice2 < 0))
1075: /* MUTANT (del_stmt) */ /*                 return -1; */ 
1075: /* MUTANT (rep_const) */                return 0;
1075: /* MUTANT (rep_const) */                return 1;
1075: /* MUTANT (rep_const) */                return ((-1)+1);
1075: /* MUTANT (rep_const) */                return ((-1)-1);
1078: /* MUTANT (rep_op) */            if (choice1 != handPos)
1078: /* MUTANT (negate) */            if(! (choice1 == handPos))
1080: /* MUTANT (del_stmt) */ /*                 return -1; */ 
1080: /* MUTANT (rep_const) */                return 0;
1080: /* MUTANT (rep_const) */                return 1;
1080: /* MUTANT (rep_const) */                return ((-1)+1);
1080: /* MUTANT (rep_const) */                return ((-1)-1);
1083: /* MUTANT (rep_op) */            for (i = 0; i <= state->handCount[currentPlayer]; i++)
1083: /* MUTANT (rep_op) */            for (i = 0; i > state->handCount[currentPlayer]; i++)
1083: /* MUTANT (rep_op) */            for (i = 0; i >= state->handCount[currentPlayer]; i++)
1083: /* MUTANT (rep_op) */            for (i = 0; i == state->handCount[currentPlayer]; i++)
1083: /* MUTANT (rep_op) */            for (i = 0; i != state->handCount[currentPlayer]; i++)
1083: /* MUTANT (rep_op) */            for (i = 0; i < state->handCount[currentPlayer]; i--)
1083: /* MUTANT (rep_const) */            for (i = 1; i < state->handCount[currentPlayer]; i++)
1083: /* MUTANT (rep_const) */            for (i = -1; i < state->handCount[currentPlayer]; i++)
1085: /* MUTANT (rep_op) */                if (i == handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
1085: /* MUTANT (rep_op) */                if (i != handPos || i == state->hand[currentPlayer][choice1] && i != choice1)
1085: /* MUTANT (rep_op) */                if (i != handPos && i != state->hand[currentPlayer][choice1] && i != choice1)
1085: /* MUTANT (rep_op) */                if (i != handPos && i == state->hand[currentPlayer][choice1] || i != choice1)
1085: /* MUTANT (rep_op) */                if (i != handPos && i == state->hand[currentPlayer][choice1] && i == choice1)
1085: /* MUTANT (negate) */                if(! (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1))
1087: /* MUTANT (del_stmt) */ /*                     j++; */ 
1087: /* MUTANT (rep_op) */                    j--;
1090: /* MUTANT (rep_op) */            if (j <= choice2)
1090: /* MUTANT (rep_op) */            if (j > choice2)
1090: /* MUTANT (rep_op) */            if (j >= choice2)
1090: /* MUTANT (rep_op) */            if (j == choice2)
1090: /* MUTANT (rep_op) */            if (j != choice2)
1090: /* MUTANT (negate) */            if(! (j < choice2))
1092: /* MUTANT (del_stmt) */ /*                 return -1; */ 
1092: /* MUTANT (rep_const) */                return 0;
1092: /* MUTANT (rep_const) */                return 1;
1092: /* MUTANT (rep_const) */                return ((-1)+1);
1092: /* MUTANT (rep_const) */                return ((-1)-1);
1095: /* MUTANT (negate) */            if(! (DEBUG))
1099: /* MUTANT (del_stmt) */ /*             state->supplyCount[state->hand[currentPlayer][choice1]] += choice2; */ 
1099: /* MUTANT (rep_op) */            state->supplyCount[state->hand[currentPlayer][choice1]] -= choice2;
1099: /* MUTANT (rep_op) */            state->supplyCount[state->hand[currentPlayer][choice1]] *= choice2;
1099: /* MUTANT (rep_op) */            state->supplyCount[state->hand[currentPlayer][choice1]] %= choice2;
1102: /* MUTANT (rep_op) */            for (i = 0; i <= state->numPlayers; i++)
1102: /* MUTANT (rep_op) */            for (i = 0; i > state->numPlayers; i++)
1102: /* MUTANT (rep_op) */            for (i = 0; i >= state->numPlayers; i++)
1102: /* MUTANT (rep_op) */            for (i = 0; i == state->numPlayers; i++)
1102: /* MUTANT (rep_op) */            for (i = 0; i != state->numPlayers; i++)
1102: /* MUTANT (rep_op) */            for (i = 0; i < state->numPlayers; i--)
1102: /* MUTANT (rep_const) */            for (i = 1; i < state->numPlayers; i++)
1102: /* MUTANT (rep_const) */            for (i = -1; i < state->numPlayers; i++)
1104: /* MUTANT (rep_op) */                if (i == currentPlayer)
1104: /* MUTANT (negate) */                if(! (i != currentPlayer))
1106: /* MUTANT (del_stmt) */ /*                     gainCard(state->hand[currentPlayer][choice1], state, 0, i); */ 
1106: /* MUTANT (rep_const) */                    gainCard(state->hand[currentPlayer][choice1], state, 1, i);
1106: /* MUTANT (rep_const) */                    gainCard(state->hand[currentPlayer][choice1], state, -1, i);
1111: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
1111: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
1114: /* MUTANT (rep_op) */            for (j = 0; j <= choice2; j++)
1114: /* MUTANT (rep_op) */            for (j = 0; j > choice2; j++)
1114: /* MUTANT (rep_op) */            for (j = 0; j >= choice2; j++)
1114: /* MUTANT (rep_op) */            for (j = 0; j == choice2; j++)
1114: /* MUTANT (rep_op) */            for (j = 0; j != choice2; j++)
1114: /* MUTANT (rep_op) */            for (j = 0; j < choice2; j--)
1114: /* MUTANT (rep_const) */            for (j = 1; j < choice2; j++)
1114: /* MUTANT (rep_const) */            for (j = -1; j < choice2; j++)
1116: /* MUTANT (rep_op) */                for (i = 0; i <= state->handCount[currentPlayer]; i++)
1116: /* MUTANT (rep_op) */                for (i = 0; i > state->handCount[currentPlayer]; i++)
1116: /* MUTANT (rep_op) */                for (i = 0; i >= state->handCount[currentPlayer]; i++)
1116: /* MUTANT (rep_op) */                for (i = 0; i == state->handCount[currentPlayer]; i++)
1116: /* MUTANT (rep_op) */                for (i = 0; i != state->handCount[currentPlayer]; i++)
1116: /* MUTANT (rep_op) */                for (i = 0; i < state->handCount[currentPlayer]; i--)
1116: /* MUTANT (rep_const) */                for (i = 1; i < state->handCount[currentPlayer]; i++)
1116: /* MUTANT (rep_const) */                for (i = -1; i < state->handCount[currentPlayer]; i++)
1118: /* MUTANT (rep_op) */                    if (state->hand[currentPlayer][i] != state->hand[currentPlayer][choice1])
1118: /* MUTANT (negate) */                    if(! (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]))
1120: /* MUTANT (del_stmt) */ /*                         discardCard(i, currentPlayer, state, 1); */ 
1120: /* MUTANT (rep_const) */                        discardCard(i, currentPlayer, state, 0);
1120: /* MUTANT (rep_const) */                        discardCard(i, currentPlayer, state, -1);
1120: /* MUTANT (rep_const) */                        discardCard(i, currentPlayer, state, ((1)+1));
1121: /* MUTANT (del_stmt) */ /*                         break; */ 
1126: /* MUTANT (rep_const) */            return 1;
1126: /* MUTANT (rep_const) */            return -1;
1130: /* MUTANT (rep_const) */            updateCoins(currentPlayer, state, 0);
1130: /* MUTANT (rep_const) */            updateCoins(currentPlayer, state, 1);
1130: /* MUTANT (rep_const) */            updateCoins(currentPlayer, state, -1);
1130: /* MUTANT (rep_const) */            updateCoins(currentPlayer, state, ((2)+1));
1130: /* MUTANT (rep_const) */            updateCoins(currentPlayer, state, ((2)-1));
1131: /* MUTANT (rep_op) */            for (i = 0; i <= state->numPlayers; i++)
1131: /* MUTANT (rep_op) */            for (i = 0; i > state->numPlayers; i++)
1131: /* MUTANT (rep_op) */            for (i = 0; i >= state->numPlayers; i++)
1131: /* MUTANT (rep_op) */            for (i = 0; i == state->numPlayers; i++)
1131: /* MUTANT (rep_op) */            for (i = 0; i != state->numPlayers; i++)
1131: /* MUTANT (rep_op) */            for (i = 0; i < state->numPlayers; i--)
1131: /* MUTANT (rep_const) */            for (i = 1; i < state->numPlayers; i++)
1131: /* MUTANT (rep_const) */            for (i = -1; i < state->numPlayers; i++)
1133: /* MUTANT (rep_op) */                if (i == currentPlayer)
1133: /* MUTANT (negate) */                if(! (i != currentPlayer))
1135: /* MUTANT (rep_op) */                    for (j = 0; j <= state->handCount[i]; j++)
1135: /* MUTANT (rep_op) */                    for (j = 0; j > state->handCount[i]; j++)
1135: /* MUTANT (rep_op) */                    for (j = 0; j >= state->handCount[i]; j++)
1135: /* MUTANT (rep_op) */                    for (j = 0; j == state->handCount[i]; j++)
1135: /* MUTANT (rep_op) */                    for (j = 0; j != state->handCount[i]; j++)
1135: /* MUTANT (rep_op) */                    for (j = 0; j < state->handCount[i]; j--)
1135: /* MUTANT (rep_const) */                    for (j = 1; j < state->handCount[i]; j++)
1135: /* MUTANT (rep_const) */                    for (j = -1; j < state->handCount[i]; j++)
1137: /* MUTANT (rep_op) */                        if (state->hand[i][j] != copper)
1137: /* MUTANT (negate) */                        if(! (state->hand[i][j] == copper))
1139: /* MUTANT (del_stmt) */ /*                             discardCard(j, i, state, 0); */ 
1139: /* MUTANT (rep_const) */                            discardCard(j, i, state, 1);
1139: /* MUTANT (rep_const) */                            discardCard(j, i, state, -1);
1140: /* MUTANT (del_stmt) */ /*                             break; */ 
1142: /* MUTANT (rep_op) */                        if (j != state->handCount[i])
1142: /* MUTANT (negate) */                        if(! (j == state->handCount[i]))
1144: /* MUTANT (rep_op) */                            for (k = 0; k <= state->handCount[i]; k++)
1144: /* MUTANT (rep_op) */                            for (k = 0; k > state->handCount[i]; k++)
1144: /* MUTANT (rep_op) */                            for (k = 0; k >= state->handCount[i]; k++)
1144: /* MUTANT (rep_op) */                            for (k = 0; k == state->handCount[i]; k++)
1144: /* MUTANT (rep_op) */                            for (k = 0; k != state->handCount[i]; k++)
1144: /* MUTANT (rep_op) */                            for (k = 0; k < state->handCount[i]; k--)
1144: /* MUTANT (rep_const) */                            for (k = 1; k < state->handCount[i]; k++)
1144: /* MUTANT (rep_const) */                            for (k = -1; k < state->handCount[i]; k++)
1146: /* MUTANT (negate) */                                if(! (DEBUG))
1158: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
1158: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
1160: /* MUTANT (del_stmt) */ /*             return 0; */ 
1160: /* MUTANT (rep_const) */            return 1;
1160: /* MUTANT (rep_const) */            return -1;
1165: /* MUTANT (rep_op) */            state->coins = state->coins - 2;
1165: /* MUTANT (rep_op) */            state->coins = state->coins * 2;
1165: /* MUTANT (rep_op) */            state->coins = state->coins % 2;
1165: /* MUTANT (rep_const) */            state->coins = state->coins + 0;
1165: /* MUTANT (rep_const) */            state->coins = state->coins + 1;
1165: /* MUTANT (rep_const) */            state->coins = state->coins + -1;
1165: /* MUTANT (rep_const) */            state->coins = state->coins + ((2)+1);
1165: /* MUTANT (rep_const) */            state->coins = state->coins + ((2)-1);
1168: /* MUTANT (rep_op) */            if ( state->supplyCount[choice1] != -1 )
1168: /* MUTANT (rep_const) */            if ( state->supplyCount[choice1] == 0 )
1168: /* MUTANT (rep_const) */            if ( state->supplyCount[choice1] == 1 )
1168: /* MUTANT (rep_const) */            if ( state->supplyCount[choice1] == ((-1)+1) )
1168: /* MUTANT (rep_const) */            if ( state->supplyCount[choice1] == ((-1)-1) )
1168: /* MUTANT (negate) */            if(! ( state->supplyCount[choice1] == -1 ))
1170: /* MUTANT (del_stmt) */ /*                 return -1; */ 
1170: /* MUTANT (rep_const) */                return 0;
1170: /* MUTANT (rep_const) */                return 1;
1170: /* MUTANT (rep_const) */                return ((-1)+1);
1170: /* MUTANT (rep_const) */                return ((-1)-1);
1174: /* MUTANT (rep_op) */            state->embargoTokens[choice1]--;
1177: /* MUTANT (del_stmt) */ /*             discardCard(handPos, currentPlayer, state, 1); */ 
1177: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 0);
1177: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
1177: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, ((1)+1));
1178: /* MUTANT (del_stmt) */ /*             return 0; */ 
1178: /* MUTANT (rep_const) */            return 1;
1178: /* MUTANT (rep_const) */            return -1;
1182: /* MUTANT (rep_op) */            state->outpostPlayed--;
1185: /* MUTANT (del_stmt) */ /*             discardCard(handPos, currentPlayer, state, 0); */ 
1185: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
1185: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
1186: /* MUTANT (del_stmt) */ /*             return 0; */ 
1186: /* MUTANT (rep_const) */            return 1;
1186: /* MUTANT (rep_const) */            return -1;
1190: /* MUTANT (rep_op) */            state->numBuys--;
1192: /* MUTANT (negate) */            if(! (choice1))
1195: /* MUTANT (del_stmt) */ /*                 state->coins = state->coins + getCost( handCard(choice1, state) ); */ 
1195: /* MUTANT (rep_op) */                state->coins = state->coins - getCost( handCard(choice1, state) );
1195: /* MUTANT (rep_op) */                state->coins = state->coins * getCost( handCard(choice1, state) );
1195: /* MUTANT (rep_op) */                state->coins = state->coins % getCost( handCard(choice1, state) );
1197: /* MUTANT (del_stmt) */ /*                 discardCard(choice1, currentPlayer, state, 1); */ 
1197: /* MUTANT (rep_const) */                discardCard(choice1, currentPlayer, state, 0);
1197: /* MUTANT (rep_const) */                discardCard(choice1, currentPlayer, state, -1);
1197: /* MUTANT (rep_const) */                discardCard(choice1, currentPlayer, state, ((1)+1));
1201: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, 1);
1201: /* MUTANT (rep_const) */            discardCard(handPos, currentPlayer, state, -1);
1202: /* MUTANT (del_stmt) */ /*             return 0; */ 
1202: /* MUTANT (rep_const) */            return 1;
1202: /* MUTANT (rep_const) */            return -1;
1205: /* MUTANT (rep_op) */            for (i = 0; i <= state->numPlayers; i++) {
1205: /* MUTANT (rep_op) */            for (i = 0; i > state->numPlayers; i++) {
1205: /* MUTANT (rep_op) */            for (i = 0; i >= state->numPlayers; i++) {
1205: /* MUTANT (rep_op) */            for (i = 0; i == state->numPlayers; i++) {
1205: /* MUTANT (rep_op) */            for (i = 0; i != state->numPlayers; i++) {
1205: /* MUTANT (rep_op) */            for (i = 0; i < state->numPlayers; i--) {
1205: /* MUTANT (rep_const) */            for (i = 1; i < state->numPlayers; i++) {
1205: /* MUTANT (rep_const) */            for (i = -1; i < state->numPlayers; i++) {
1206: /* MUTANT (rep_op) */                if (i == currentPlayer) {
1206: /* MUTANT (negate) */                if(! (i != currentPlayer)) {
1207: /* MUTANT (del_stmt) */ /*                     state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--]; */                         state->deckCount[i]--;
1207: /* MUTANT (del_stmt) */ /*                     state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--]; */  /*                         state->deckCount[i]--; */ 
1207: /* MUTANT (del_stmt) */                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--]; /*                         state->deckCount[i]--; */ 
1207: /* MUTANT (rep_op) */                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]++];                        state->deckCount[i]--;
1207: /* MUTANT (rep_op) */                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];                        state->deckCount[i]++;
1208: /* MUTANT (del_stmt) */ /*                     state->discardCount[i]++; */ 
1208: /* MUTANT (rep_op) */                    state->discardCount[i]--;
1209: /* MUTANT (del_stmt) */ /*                     state->deck[i][state->deckCount[i]--] = curse; */  //Top card now a curse
1209: /* MUTANT (rep_op) */                    state->deck[i][state->deckCount[i]++] = curse; //Top card now a curse
1212: /* MUTANT (rep_const) */            return 1;
1212: /* MUTANT (rep_const) */            return -1;
1216: /* MUTANT (rep_const) */            index = 0;
1216: /* MUTANT (rep_const) */            index = 1;
1216: /* MUTANT (rep_const) */            index = ((-1)+1);
1216: /* MUTANT (rep_const) */            index = ((-1)-1);
1217: /* MUTANT (rep_op) */            for (i = 0; i <= state->handCount[currentPlayer]; i++)
1217: /* MUTANT (rep_op) */            for (i = 0; i > state->handCount[currentPlayer]; i++)
1217: /* MUTANT (rep_op) */            for (i = 0; i >= state->handCount[currentPlayer]; i++)
1217: /* MUTANT (rep_op) */            for (i = 0; i == state->handCount[currentPlayer]; i++)
1217: /* MUTANT (rep_op) */            for (i = 0; i != state->handCount[currentPlayer]; i++)
1217: /* MUTANT (rep_op) */            for (i = 0; i < state->handCount[currentPlayer]; i--)
1217: /* MUTANT (rep_const) */            for (i = 1; i < state->handCount[currentPlayer]; i++)
1217: /* MUTANT (rep_const) */            for (i = -1; i < state->handCount[currentPlayer]; i++)
1219: /* MUTANT (rep_op) */                if (state->hand[currentPlayer][i] != treasure_map && i != handPos)
1219: /* MUTANT (rep_op) */                if (state->hand[currentPlayer][i] == treasure_map || i != handPos)
1219: /* MUTANT (rep_op) */                if (state->hand[currentPlayer][i] == treasure_map && i == handPos)
1219: /* MUTANT (negate) */                if(! (state->hand[currentPlayer][i] == treasure_map && i != handPos))
1221: /* MUTANT (del_stmt) */ /*                     index = i; */ 
1222: /* MUTANT (del_stmt) */ /*                     break; */ 
1225: /* MUTANT (rep_op) */            if (index <= -1)
1225: /* MUTANT (rep_op) */            if (index < -1)
1225: /* MUTANT (rep_op) */            if (index >= -1)
1225: /* MUTANT (rep_op) */            if (index == -1)
1225: /* MUTANT (rep_op) */            if (index != -1)
1225: /* MUTANT (rep_const) */            if (index > 0)
1225: /* MUTANT (rep_const) */            if (index > 1)
1225: /* MUTANT (rep_const) */            if (index > ((-1)+1))
1225: /* MUTANT (rep_const) */            if (index > ((-1)-1))
1225: /* MUTANT (negate) */            if(! (index > -1))
1228: /* MUTANT (del_stmt) */ /*                 discardCard(handPos, currentPlayer, state, 1); */ 
1228: /* MUTANT (rep_const) */                discardCard(handPos, currentPlayer, state, 0);
1228: /* MUTANT (rep_const) */                discardCard(handPos, currentPlayer, state, -1);
1228: /* MUTANT (rep_const) */                discardCard(handPos, currentPlayer, state, ((1)+1));
1229: /* MUTANT (del_stmt) */ /*                 discardCard(index, currentPlayer, state, 1); */ 
1229: /* MUTANT (rep_const) */                discardCard(index, currentPlayer, state, 0);
1229: /* MUTANT (rep_const) */                discardCard(index, currentPlayer, state, -1);
1229: /* MUTANT (rep_const) */                discardCard(index, currentPlayer, state, ((1)+1));
1232: /* MUTANT (rep_op) */                for (i = 0; i <= 4; i++)
1232: /* MUTANT (rep_op) */                for (i = 0; i > 4; i++)
1232: /* MUTANT (rep_op) */                for (i = 0; i >= 4; i++)
1232: /* MUTANT (rep_op) */                for (i = 0; i == 4; i++)
1232: /* MUTANT (rep_op) */                for (i = 0; i != 4; i++)
1232: /* MUTANT (rep_op) */                for (i = 0; i < 4; i--)
1232: /* MUTANT (rep_const) */                for (i = 1; i < 4; i++)
1232: /* MUTANT (rep_const) */                for (i = -1; i < 4; i++)
1232: /* MUTANT (rep_const) */                for (i = 0; i < 0; i++)
1232: /* MUTANT (rep_const) */                for (i = 0; i < 1; i++)
1232: /* MUTANT (rep_const) */                for (i = 0; i < -1; i++)
1232: /* MUTANT (rep_const) */                for (i = 0; i < ((4)+1); i++)
1232: /* MUTANT (rep_const) */                for (i = 0; i < ((4)-1); i++)
1234: /* MUTANT (del_stmt) */ /*                     gainCard(gold, state, 1, currentPlayer); */ 
1234: /* MUTANT (rep_const) */                    gainCard(gold, state, 0, currentPlayer);
1234: /* MUTANT (rep_const) */                    gainCard(gold, state, -1, currentPlayer);
1234: /* MUTANT (rep_const) */                    gainCard(gold, state, ((1)+1), currentPlayer);
1238: /* MUTANT (rep_const) */                return 0;
1238: /* MUTANT (rep_const) */                return -1;
1238: /* MUTANT (rep_const) */                return ((1)+1);
1242: /* MUTANT (rep_const) */            return 0;
1242: /* MUTANT (rep_const) */            return 1;
1242: /* MUTANT (rep_const) */            return ((-1)+1);
1242: /* MUTANT (rep_const) */            return ((-1)-1);
1245: /* MUTANT (rep_const) */    return 0;
1245: /* MUTANT (rep_const) */    return 1;
1245: /* MUTANT (rep_const) */    return ((-1)+1);
1245: /* MUTANT (rep_const) */    return ((-1)-1);
1252: /* MUTANT (rep_op) */    if (trashFlag <= 1)
1252: /* MUTANT (rep_op) */    if (trashFlag > 1)
1252: /* MUTANT (rep_op) */    if (trashFlag >= 1)
1252: /* MUTANT (rep_op) */    if (trashFlag == 1)
1252: /* MUTANT (rep_op) */    if (trashFlag != 1)
1252: /* MUTANT (rep_const) */    if (trashFlag < 0)
1252: /* MUTANT (rep_const) */    if (trashFlag < -1)
1252: /* MUTANT (rep_const) */    if (trashFlag < ((1)+1))
1252: /* MUTANT (negate) */    if(! (trashFlag < 1))
1255: /* MUTANT (del_stmt) */ /*         state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; */ 
1256: /* MUTANT (del_stmt) */ /*         state->playedCardCount++; */ 
1256: /* MUTANT (rep_op) */        state->playedCardCount--;
1260: /* MUTANT (rep_const) */    state->hand[currentPlayer][handPos] = 0;
1260: /* MUTANT (rep_const) */    state->hand[currentPlayer][handPos] = 1;
1260: /* MUTANT (rep_const) */    state->hand[currentPlayer][handPos] = ((-1)+1);
1260: /* MUTANT (rep_const) */    state->hand[currentPlayer][handPos] = ((-1)-1);
1263: /* MUTANT (rep_op) */    if ( handPos != (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
1263: /* MUTANT (rep_const) */    if ( handPos == (state->handCount[currentPlayer] - 0) )     //last card in hand array is played
1263: /* MUTANT (rep_const) */    if ( handPos == (state->handCount[currentPlayer] - -1) )     //last card in hand array is played
1263: /* MUTANT (rep_const) */    if ( handPos == (state->handCount[currentPlayer] - ((1)+1)) )     //last card in hand array is played
1263: /* MUTANT (negate) */    if(! ( handPos == (state->handCount[currentPlayer] - 1) ))     //last card in hand array is played
1266: /* MUTANT (del_stmt) */ /*         state->handCount[currentPlayer]--; */ 
1266: /* MUTANT (rep_op) */        state->handCount[currentPlayer]++;
1268: /* MUTANT (rep_op) */    else if ( state->handCount[currentPlayer] != 1 ) //only one card in hand
1268: /* MUTANT (rep_const) */    else if ( state->handCount[currentPlayer] == 0 ) //only one card in hand
1268: /* MUTANT (rep_const) */    else if ( state->handCount[currentPlayer] == -1 ) //only one card in hand
1268: /* MUTANT (rep_const) */    else if ( state->handCount[currentPlayer] == ((1)+1) ) //only one card in hand
1268: /* MUTANT (negate) */    else if(! ( state->handCount[currentPlayer] == 1 )) //only one card in hand
1271: /* MUTANT (del_stmt) */ /*         state->handCount[currentPlayer]--; */ 
1271: /* MUTANT (rep_op) */        state->handCount[currentPlayer]++;
1276: /* MUTANT (del_stmt) */ /*         state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)]; */ 
1276: /* MUTANT (rep_const) */        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 0)];
1276: /* MUTANT (rep_const) */        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - -1)];
1276: /* MUTANT (rep_const) */        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - ((1)+1))];
1278: /* MUTANT (del_stmt) */ /*         state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1; */ 
1278: /* MUTANT (rep_const) */        state->hand[currentPlayer][state->handCount[currentPlayer] - 0] = -1;
1278: /* MUTANT (rep_const) */        state->hand[currentPlayer][state->handCount[currentPlayer] - -1] = -1;
1278: /* MUTANT (rep_const) */        state->hand[currentPlayer][state->handCount[currentPlayer] - ((1)+1)] = -1;
1278: /* MUTANT (rep_const) */        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = 0;
1278: /* MUTANT (rep_const) */        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = 1;
1278: /* MUTANT (rep_const) */        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = ((-1)+1);
1278: /* MUTANT (rep_const) */        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = ((-1)-1);
1280: /* MUTANT (del_stmt) */ /*         state->handCount[currentPlayer]--; */ 
1280: /* MUTANT (rep_op) */        state->handCount[currentPlayer]++;
1283: /* MUTANT (rep_const) */    return 1;
1283: /* MUTANT (rep_const) */    return -1;
1291: /* MUTANT (rep_op) */    if ( supplyCount(supplyPos, state) <= 1 )
1291: /* MUTANT (rep_op) */    if ( supplyCount(supplyPos, state) > 1 )
1291: /* MUTANT (rep_op) */    if ( supplyCount(supplyPos, state) >= 1 )
1291: /* MUTANT (rep_op) */    if ( supplyCount(supplyPos, state) == 1 )
1291: /* MUTANT (rep_op) */    if ( supplyCount(supplyPos, state) != 1 )
1291: /* MUTANT (rep_const) */    if ( supplyCount(supplyPos, state) < 0 )
1291: /* MUTANT (rep_const) */    if ( supplyCount(supplyPos, state) < -1 )
1291: /* MUTANT (rep_const) */    if ( supplyCount(supplyPos, state) < ((1)+1) )
1291: /* MUTANT (negate) */    if(! ( supplyCount(supplyPos, state) < 1 ))
1293: /* MUTANT (del_stmt) */ /*         return -1; */ 
1293: /* MUTANT (rep_const) */        return 0;
1293: /* MUTANT (rep_const) */        return 1;
1293: /* MUTANT (rep_const) */        return ((-1)+1);
1293: /* MUTANT (rep_const) */        return ((-1)-1);
1301: /* MUTANT (rep_op) */    if (toFlag != 1)
1301: /* MUTANT (rep_const) */    if (toFlag == 0)
1301: /* MUTANT (rep_const) */    if (toFlag == -1)
1301: /* MUTANT (rep_const) */    if (toFlag == ((1)+1))
1301: /* MUTANT (negate) */    if(! (toFlag == 1))
1303: /* MUTANT (del_stmt) */ /*         state->deck[ player ][ state->deckCount[player] ] = supplyPos; */ 
1304: /* MUTANT (del_stmt) */ /*         state->deckCount[player]++; */ 
1304: /* MUTANT (rep_op) */        state->deckCount[player]--;
1306: /* MUTANT (rep_op) */    else if (toFlag != 2)
1306: /* MUTANT (rep_const) */    else if (toFlag == 0)
1306: /* MUTANT (rep_const) */    else if (toFlag == 1)
1306: /* MUTANT (rep_const) */    else if (toFlag == -1)
1306: /* MUTANT (rep_const) */    else if (toFlag == ((2)+1))
1306: /* MUTANT (rep_const) */    else if (toFlag == ((2)-1))
1306: /* MUTANT (negate) */    else if(! (toFlag == 2))
1308: /* MUTANT (del_stmt) */ /*         state->hand[ player ][ state->handCount[player] ] = supplyPos; */ 
1309: /* MUTANT (del_stmt) */ /*         state->handCount[player]++; */ 
1309: /* MUTANT (rep_op) */        state->handCount[player]--;
1313: /* MUTANT (del_stmt) */ /*         state->discard[player][ state->discardCount[player] ] = supplyPos; */ 
1314: /* MUTANT (del_stmt) */ /*         state->discardCount[player]++; */ 
1314: /* MUTANT (rep_op) */        state->discardCount[player]--;
1318: /* MUTANT (rep_op) */    state->supplyCount[supplyPos]++;
1320: /* MUTANT (del_stmt) */ /*     return 0; */ 
1320: /* MUTANT (rep_const) */    return 1;
1320: /* MUTANT (rep_const) */    return -1;
1325: /* MUTANT (del_stmt) */ /*     int i; */ 
1328: /* MUTANT (del_stmt) */ /*     state->coins = 0; */ 
1328: /* MUTANT (rep_const) */    state->coins = 1;
1328: /* MUTANT (rep_const) */    state->coins = -1;
1331: /* MUTANT (rep_op) */    for (i = 0; i <= state->handCount[player]; i++)
1331: /* MUTANT (rep_op) */    for (i = 0; i > state->handCount[player]; i++)
1331: /* MUTANT (rep_op) */    for (i = 0; i >= state->handCount[player]; i++)
1331: /* MUTANT (rep_op) */    for (i = 0; i == state->handCount[player]; i++)
1331: /* MUTANT (rep_op) */    for (i = 0; i != state->handCount[player]; i++)
1331: /* MUTANT (rep_op) */    for (i = 0; i < state->handCount[player]; i--)
1331: /* MUTANT (rep_const) */    for (i = 1; i < state->handCount[player]; i++)
1331: /* MUTANT (rep_const) */    for (i = -1; i < state->handCount[player]; i++)
1333: /* MUTANT (rep_op) */        if (state->hand[player][i] != copper)
1333: /* MUTANT (negate) */        if(! (state->hand[player][i] == copper))
1335: /* MUTANT (del_stmt) */ /*             state->coins += 1; */ 
1335: /* MUTANT (rep_op) */            state->coins -= 1;
1335: /* MUTANT (rep_op) */            state->coins *= 1;
1335: /* MUTANT (rep_op) */            state->coins %= 1;
1335: /* MUTANT (rep_const) */            state->coins += 0;
1335: /* MUTANT (rep_const) */            state->coins += -1;
1335: /* MUTANT (rep_const) */            state->coins += ((1)+1);
1337: /* MUTANT (rep_op) */        else if (state->hand[player][i] != silver)
1337: /* MUTANT (negate) */        else if(! (state->hand[player][i] == silver))
1339: /* MUTANT (del_stmt) */ /*             state->coins += 2; */ 
1339: /* MUTANT (rep_op) */            state->coins -= 2;
1339: /* MUTANT (rep_op) */            state->coins *= 2;
1339: /* MUTANT (rep_op) */            state->coins %= 2;
1339: /* MUTANT (rep_const) */            state->coins += 0;
1339: /* MUTANT (rep_const) */            state->coins += 1;
1339: /* MUTANT (rep_const) */            state->coins += -1;
1339: /* MUTANT (rep_const) */            state->coins += ((2)+1);
1339: /* MUTANT (rep_const) */            state->coins += ((2)-1);
1341: /* MUTANT (rep_op) */        else if (state->hand[player][i] != gold)
1341: /* MUTANT (negate) */        else if(! (state->hand[player][i] == gold))
1343: /* MUTANT (del_stmt) */ /*             state->coins += 3; */ 
1343: /* MUTANT (rep_op) */            state->coins -= 3;
1343: /* MUTANT (rep_op) */            state->coins *= 3;
1343: /* MUTANT (rep_op) */            state->coins %= 3;
1343: /* MUTANT (rep_const) */            state->coins += 0;
1343: /* MUTANT (rep_const) */            state->coins += 1;
1343: /* MUTANT (rep_const) */            state->coins += -1;
1343: /* MUTANT (rep_const) */            state->coins += ((3)+1);
1343: /* MUTANT (rep_const) */            state->coins += ((3)-1);
1348: /* MUTANT (rep_op) */    state->coins -= bonus;
1348: /* MUTANT (rep_op) */    state->coins *= bonus;
1348: /* MUTANT (rep_op) */    state->coins %= bonus;
1350: /* MUTANT (del_stmt) */ /*     return 0; */ 
1350: /* MUTANT (rep_const) */    return 1;
1350: /* MUTANT (rep_const) */    return -1;
