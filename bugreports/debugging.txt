Council room card issue:
Out of 100000x runs, sometimes there would be an incorrect hand count after the card has been played.

As an example:
 1 Random testing card (100000x): Council room.
 2 ASSERT FAILED: Post hand count.
 3 Target hand count: 62
 4 Actual hand count: 64
 5 ASSERT FAILED: Post hand count.
 6 Target hand count: 460
 7 Actual hand count: 459
 8 ASSERT FAILED: Post hand count.
 9 Target hand count: 14
10 Actual hand count: 13
11 ASSERT FAILED: Post hand count.
12 Target hand count: 291
13 Actual hand count: 293
14 UNIT TEST FAILED.
15 File 'dominion.c'
16 Lines executed:30.96% of 562
17 Creating 'dominion.c.gcov'

I have actually had similar unit test failures in the past (especially with the smithy card) where I would expect that after the function has executed, there should be 3 more cards in the card. This is the intended effect of the function and I was testing only the effect of that function (i.e. all calls to the smithy function should result in 3 cards being drawn. If that didn't work then the function had failed and was considered to be buggy). However, it didn't occur to me until later that it is not always the case that three cards can be drawn. I didn't realize this until I had run the gdb debugger and stepped through the functions and inspected the game state. Trace statements also helped. In the cases where the above assertions had failed, it was because the player simply didn't have enough cards to draw and so the draw card function would not draw any cards. My unit tests would then pick this up as a failure since it had expected more cards to be drawn. In actuality though, this is the correct behavior of the game.

Both the council room card and also the smithy card call the draw card function in which it draws a card. In the case of the smithy card, it calls this function three times and so you would expect that three cards are drawn every time. However, if there are insufficient cards to be drawn and you attempt to draw a card, the draw card function will not draw a card. If that is the case in the smithy card function, then it will draw less than three cards. According to my unit tests that is a failure but in reality that is correct behavior and so the unit test itself is wrong. That would also explain why the failures are so infrequent (0.001% of the time).

Looking at the council room function, it is also supposed to draw four cards. So I had expected that it should draw four cards and if it doesn't, then something must be wrong with the code and therefore that test case will be counted as failure. However, similar to the above scenario, it is very likely that the dominion code was actually correct and that my unit test was wrong. For example, if in the game state a player only has 2 cards to draw and you attempt to draw 4 cards, then only 2 cards should be drawn. But in my unit tests it was expected that 4 cards were to be drawn regardless.

I think this is a testament to Agan's first principle "Understand the System." I did not understand it well enough to realize that when some of my unit tests were failing, the code itself was actually correct and the unit test itself was wrong. Likewise, the third rule comes into play here as well "Quit Thinking and Look." Rather than actually looking at the code, I kept thinking to myself "Why is this not working? This should work. Hmm..." On a related note for rule seven "Check the Plug" where it says don't trust your tests, I definitely placed too much trust in my tests.
